# 
# This file is part of the RevBayes examples collection.
#
# Example file for a Bayesian analysis using MCMC on a non-clock tree and Jukes-Cantor (JC) model with primates dataset.
#
# author: Sebastian Hoehna
#


# read the data
# the readCharacter function returns a vector of matrices. We just take the first one.
D <- readCharacterData("data/primates_mtDNA.nex")[1]

# You may want to check some stuff from the data matrix.
# You can always find the available member methods of an object by xxx.methods() where xxx is your variable name.
D


# Get some useful variables from the data. We need these later on.
taxaCount <- D.ntaxa()
nSites <- D.nchar()[1]
names <- D.names()

# Specify a uniform topology prior
tau ~ uniformTopology(taxaCount, names)

# create a random variable for each branch length
numNodes <- tau.nnodes()
for (i in 1:numNodes) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  brlens[i] ~ exponential(1.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[i] <- mScale(brlens[i],lambda=1,tune=true,weight=1) 
}


# Build the tree by combining the topology with the branch length.
psi := treeAssembly(tau, brlens)

# moves on the tree
moves[numNodes+1] <- mNNI(tau, weight=1.0)


# the rate matrix, here we use the Jukes-Cantor model with 4 states
Q <- JC(4)

clockRate <- 1.0

# the sequence evolution model
seq ~ substModel(tree=psi, Q=Q, branchRates=clockRate, nSites=nSites, type="DNA")

# attach the data
seq.clamp(D)

monitors[1] <- modelmonitor(filename="jc_non-clock.log",printgen=10, separator = "	")
monitors[2] <- filemonitor(filename="jc_non-clock.trees",printgen=10, separator = "	", psi)
monitors[3] <- screenmonitor(printgen=10, separator = "	", brlens[1])

mymodel <- model(Q)
 
mymcmc <- mcmc(mymodel, monitors, moves)

# Note that one mcmc iteration includes 33 proposal (incl. accept/reject) which is the number of moves times their weight.
# If you choose more or different proposals, or different weights for the proposals, then the number of proposals changes per iteration.
mymcmc.burnin(generations=1000,tuningInterval=100)
mymcmc.run(generations=2000)

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace <- readTreeTrace("./jc_non-clock.trees","non-clock")
# and get the summary of the tree trace
treetrace.summarize()
