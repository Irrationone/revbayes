################################################################################
#
# MCMC analysis of simulated test data
# 
# Model:
# GTR model
# random local clock model.
#
#
# author: Sebastian Hoehna
#
################################################################################

########
# Data #
########

# read the data
# the readCharacter function returns a vector of matrices. We just take the first one
D <- readCharacterData("data/Primates.nex")[1]

# get some useful variables from the data
taxaCount <- D.ntaxa()
nSites <- D.nchar()[1]
names <- D.names()



#######
# GTR #
#######

# substitution model priors
bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dirichlet(bf)
er ~ dirichlet(e)

# moves on the substitution process parameters
# first some moves only changing one value of the simplex
moves[1] <- mSimplexElementScale(pi, alpha=10.0, tune=true, weight=2.0)
moves[moves.size()+1] <- mSimplexElementScale(er, alpha=10.0, tune=true, weight=3.0)

# the rate matrix
Q := gtr(er,pi)



#######
# BDP #
#######

# tree from birth-death process
# if we wanted to estimate the tree topology
speciation ~ exponential(0.1)
extinction ~ exponential(0.2)
org ~ unif(0,100.0)

# initialize with good values
speciation.setValue(0.2)
extinction.setValue(0.01)
org.setValue(60)

moves[moves.size()+1] <- mScale(speciation,lambda=1,tune=true,weight=1)
moves[moves.size()+1] <- mScale(extinction,lambda=1,tune=true,weight=1)
moves[moves.size()+1] <- mSlide(org,delta=1,tune=true,weight=1)

psi ~ cBDP(lambda=speciation, mu=extinction, origin=org, nTaxa=taxaCount, names=names )

#moves[moves.size()+1] <- mNarrow(psi, weight=5.0)
#moves[moves.size()+1] <- mNNI(psi, weight=1.0)
#moves[moves.size()+1] <- mFNPR(psi, weight=3.0)
moves[moves.size()+1] <- mSubtreeScale(psi, weight=3.0)
moves[moves.size()+1] <- mTreeScale(psi, lambda=1.0, tune=true, weight=3.0)
moves[moves.size()+1] <- mNodeTimeSlideUniform(psi, weight=15.0)
moves[moves.size()+1] <- mRootTimeSlide(psi, delta=1.0, tune=true, weight=3.0)

# for now we just use a fixed tree
startingTree <- readTrees("data/primates.tree")[1]
psi.setValue( startingTree )
#psi <- startingTree 

# only for monitoring purposes
tmrca := treeHeight( psi )

treeAge ~ norm(tmrca,0.01)
treeAge.clamp(0.25)



#######
# RLC #
#######

# get a clock rate variable
rho ~ beta(1,1)
# We need to initialize the probability of a rate change with a very low value because we want to start our MCMC at or close to the strict clock model.
# Starting from a strict clock model makes it easier for the MCMC to add new local clocks.
rho.setValue(0.001)
moves[moves.size()+1] <- mSlide(rho, delta=0.01, tune=true, weight=2.0)

#rho <- 0.01
lambda <- 0.0


#meanRateChange <- 2.0                      # this gives a mean rate change by a factor of 7.811176 (choose a mean-value of 1.0 if you want an expected factor of 2.873571)
meanRateChange ~ unif(1.9,2.1)              # this gives a mean rate change by a factor of 7.811176 (choose a mean-value of 1.0 if you want an expected factor of 2.873571)
stDevRateChange := meanRateChange / 3.0    # We could also divide by 5.0
valueDist <- blnorm(-meanRateChange,meanRateChange, stDevRateChange, stDevRateChange,0.5)

moves[moves.size()+1] <- mSlide(meanRateChange, delta=0.01, tune=true, weight=2.0)

branchRateMultipliers ~ branchRateJumpProcess(valueDistribution=valueDist, tree=psi, lambda=lambda, rho=rho)
moves[moves.size()+1] <- mSwitchRateJump(branchRateMultipliers, weight=10)
moves[moves.size()+1] <- mRlcRateScale(branchRateMultipliers, lambda=0.1, tune=true, weight=5)

meanClockRate ~ unif(0.0,100.0)
meanClockRate.setValue(5.6812E-3)
moves[moves.size()+1] <- mSlide(meanClockRate, delta=0.1, tune=true, weight=2.0)
moves[moves.size()+1] <- mScale(meanClockRate, lambda=0.1, tune=true, weight=2.0)


clockRates := rateMultiplierPhyloFunction(tree=psi, rates=branchRateMultipliers, baseRate=meanClockRate)




########
# ASRV #
########

# set up the prior for the gamma distributed rates per site
#alpha_prior <- 1.0
#alpha ~ exponential(alpha_prior)
#moves[moves.size()+1] <- mScale(alpha,lambda=1,tune=true,weight=1.0)

# construct the gamma distributed rate variables
#for ( i in 1:4 ) {
#  gammaRates[i] := qgamma( i*0.25 - 0.125, alpha, alpha )
#}
# now normalize the rates
# this is necessary to keep the parameters identifiable
#normGammaRates := normalize( gammaRates )



########
# CTMC #
########

# the sequence evolution model
#seq ~ substModel(tree=psi, Q=Q, branchRates=clockRates, siteRates= normGammaRates, nSites=nSites, type="DNA")
seq ~ substModel(tree=psi, Q=Q, branchRates=clockRates, nSites=nSites, type="DNA")

# attach the data
seq.clamp(D)



########
# MCMC #
########

mymodel <- model(rho)

monitors[1] <- modelmonitor(filename="test_RLC.log",printgen=10, separator = "	")
monitors[2] <- filemonitor(filename="test_RLC_ClockRates.log",printgen=10, separator = "	", branchRateMultipliers, posterior=false, prior=false, likelihood=false)
monitors[3] <- extNewickmonitor(filename="test_RLC.trees",printgen=10, separator = "	", psi, clockRates, branchRateMultipliers, posterior=false, prior=false, likelihood=false)
monitors[4] <- screenmonitor(printgen=100, rho, meanClockRate, tmrca)

 
mymcmc <- mcmc(mymodel, monitors, moves)
mymcmc.burnin(generations=1000,tuningInterval=250)
mymcmc.run(generations=2000)

mymcmc.operatorSummary()

q()

