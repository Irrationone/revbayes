################################################################################
#
# RevBayes Example: Time calibration of a tree using node dating.
#
# 
# This file: Specifies the full GTR model with a strict clock and an offset 
#            exponential distribution as a node calibration.
#            Here, we run an MCMC on this model.
#
# authors: Sebastian Hoehna
#
################################################################################



########
# Data #
########

# read the data
# the readCharacter function returns a vector of matrices. We just take the first one
D <- readCharacterData("data/Primates.nex")[1]

# We need a good starting tree because the constraints/calibrations need to match
tree <- readTrees("data/primates.tree")[1]

# get some useful variables from the data
taxaCount <- D.ntaxa()
nSites <- D.nchar()[1]
names <- D.names()




##############
# Tree model #
##############

# Birth-Death process priors
speciation ~ exponential(10.0)
extinction ~ exponential(10.0)
org ~ unif(0,100.0)

org.setValue(90)

moveIndex <- 0

# moves for the birth-death paramaters
moves[moveIndex++] <- mvScale(speciation,1,true,1.0)
moves[moveIndex++] <- mvScale(extinction,1,true,1.0)
moves[moveIndex++] <- mvSlide(org,delta=1.0,true,2.0)

# we create clades and specify a monophyletic constraint on them, for later use as calibration points
# the NWM constraint at the same time acts as a rooting constraint
clade_Apes <- clade("Gorilla", "Homo_sapiens", "Hylobates", "Macaca_fuscata", "M_fascicularis", "M_mulatta", "M_sylvanus", "Pan", "Pongo")

# we store all constraints in a vector
constraints <- v(clade_Apes)

# tree from birth-death process, with the constraints invoked
psi ~ cBDP(lambda=speciation, mu=extinction, origin=org, nTaxa=taxaCount, names=names, constraints=constraints)

# we need to rescale the initial tree so that it matches our node age constraint
tree.rescale(150)

# then we can set the initial tree
psi.setValue(tree)

# get the time of the MRCAs of the calibration points as a deterministic variable;
# create a fossil age as a stochastic variable distributed according to a prior distribution which is a function of the time of the MRCA;
# and finally clamp the stochastic fossil with its observed age

# note here that we use a negative node age which represents the time in the past
# the issue here is that the node age must be smaller than the fossil age otherwise the exponential distribution doesn't work
tmrca_Apes := -tmrca(psi,clade_Apes)
fossil_Apes ~ exponential(lambda=0.0588,offset=tmrca_Apes)       # here you could also use a normal distribution with mean=tmrca_Apes and some variance
fossiltime_Apes <- -23                                           # our observed fossil age
fossil_Apes.clamp(fossiltime_Apes)                               # clamp our observation

# moves on the tree
moves[moveIndex++] <- mvNNI(psi, 1.0)
moves[moveIndex++] <- mvFNPR(psi, 1.0)
moves[moveIndex++] <- mvSubtreeScale(psi, 5.0)
moves[moveIndex++] <- mvTreeScale(psi, 1.0, true, 3.0)
moves[moveIndex++] <- mvNodeTimeSlideUniform(psi, 10.0)
moves[moveIndex++] <- mvRootTimeSlide(psi, 1.0, true, 3.0)





#####################
# Subsitution Model #
#####################

# substition model priors
bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
pi ~ dirichlet(bf)
er ~ dirichlet(e)

# moves on the substitution process parameters
moves[moveIndex++] <- mvSimplexElementScale(pi, 10.0, true, 4.0)
moves[moveIndex++] <- mvSimplexElementScale(er, 10.0, true, 6.0)

# the rate matrix
Q := gtr(er,pi)




###############
# Clock Model #
###############

clockRate ~ exponential(100.0)

moves[moveIndex++] <- mvScale(clockRate,1,true,1)




###################
# PhyloCTMC Model #
###################

# the sequence evolution model
seq ~ substModel(psi, Q, clockRate, nSites)

# attach the data
seq.clamp(D)




############
# Monitors #
############

monitors[1] <- modelmonitor(filename="primates_node_dating.log",printgen=10, separator = "	") 
monitors[2] <- filemonitor(filename="primates_node_dating.trees",printgen=10, separator = "	", psi)
monitors[3] <- screenmonitor(printgen=10, separator = "	", tmrca_Apes)



#############
# THE Model #
#############

mymodel <- model(Q)



########
# MCMC #
########
 
mymcmc <- mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=1000,tuningInterval=100)
mymcmc.run(generations=2000)

# see the operator analysis
mymcmc.operatorSummary()



###################
# Output analyses #
###################

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
treetrace <- readTreeTrace("primates_node_dating.trees")
# and get the summary of the tree trace
treetrace.summarize()


mapTree(treetrace,"primates_node_dating_MAP.tre")
