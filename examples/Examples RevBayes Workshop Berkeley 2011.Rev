# File containing examples of the RevLanguage for the RevBayes Workshop in Berkeley, August 2011
# We provide the basic concept for the interactive use of RevBayes with the RevLanguage

# Simple mathematical operators
1 + 1				# Addition
10 - 5				# Subtraction
5 * 5				# Multiplication
10 / 2				# Division
2^3				# Exponentiation

# Math-Functions
expf(1)				# exponential function
ln(1)				# logarithmic function with natural base
sqrt(16)			# square root function
power(2,2)			# power function: power(a,b) = a^b


# Variable assignment: constant and deterministic
a <- 1				# assignment of constant node 'a'
a				# printing the value of 'a'
b := expf(a)			# assignment of deterministic node 'b' with the exponential function with parameter 'a'
b				# printing the value of 'b'
c := ln(b)			# assignment of deterministic node 'c' with logarithmic function with parameter 'b'
c				# printing the value of 'c'
d <- ln(b)			# assignment of constant node 'd' with the value if the logarithmic function with parameter 'b'
d				# printing the value of 'd'
e := c == d			
e
a <- 2  			# reassignment of variable a; every deterministic node which has 'a' as a parameter changes its value
a				# printing the value of 'a'
b				# printing the value of 'b'
c				# printing the value of 'c'
d				# printing the value of 'd'
e

# Variable assignment: stochastic
lambda <- 1			# assign constant node 'lambda' with value '1'
x ~ exp(lambda)			# create stochastic node with exponential distribution and parameter 'lambda'
x				# print value of stochastic node 'x'
#x.probability			# print the probability if 'x'
mu <- 0
sigma <- 1
y ~ norm(mu,sigma)	

# distribution functions
dexp(1,1)
rexp(1)
qexp(0.5,1)

# loops
sum <- 0
for (i in 1:100) {
sum <- sum + i
}
sum

# Fibonacci series
fib[1] <- 1
fib[2] <- 1
for (j in 3:10) {
fib[j] <- fib[j - 1] + fib[j - 2]
}

# Member-Objects





