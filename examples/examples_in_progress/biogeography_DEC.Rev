############
# Settings #
############

# analysis input
in_fp           <- "/Users/mlandis/Documents/code/revbayes-code/examples/data/"
data_fn         <- "psychotria_range.nex"
area_fn         <- "hawaii_dynamic.atlas.txt"
vdata           <- readCharacterData(in_fp + data_fn)
atlas           <- readAtlas(in_fp + area_fn)
vtree           <- readTrees(in_fp + data_fn)
tree			<- vtree[1]
data			<- vdata[1]


# analysis output
out_fp          <- "/Users/mlandis/data/bayarea/output/"
params_fn       <- "psychotria.params.txt"
num_events_fn   <- "psychotria.num_events.txt"
tree_events_fn  <- "psychotria.tree_events.txt"
nhx_fn          <- "psychotria.nhx.txt"

# MCMC settings
nGens           <- 10000
fBurn           <- 0.2


###########
#  Model  #
###########

# Per-area gain and loss rates 
#   glr[1]: 1->0, glr[2]: 0->1
for (i in 1:2) glr[i]  ~ exponential(10.0)

# Distance-dependence
#    dp is the distance-dependence power parameter
dp          ~ exponential(10.0)
grm         := fnBiogeoGRM(atlas=atlas, distancePower=dp, useAdjacency=true, useAvailable=true, useDistance=true)

# Q_like is used to compute likelihoods
Q_like      := fnBiogeoDE(gainLossRates=glr, geoRateMod=grm, numAreas=4, forbidExtinction=true)

# Q_samp is used to sample character histories
Q_samp      := fnBiogeoDE(gainLossRates=glr, geoRateMod=grm, numAreas=4, forbidExtinction=false)

# M is focal model, the range data given the tree, the atlas, and the DEC process
M           ~  dnPhyloDACTMC(tree=tree, Q=Q_like, type="biogeo", forbidExtinction=true, useCladogenesis=true)

# attach observation to M
M.clamp(data)

# create the model!
my_model    <- model(glr)



#########
# Moves #
#########

n_nodes  <- tree.nnodes()

# standard parameter moves
moves[1] <- mvScale(x=glr[1], lambda=0.5, tune=false, weight=2.0)
moves[2] <- mvScale(x=glr[2], lambda=0.5, tune=false, weight=2.0)
moves[3] <- mvScale(x=dp, 	  lambda=0.5, tune=false, weight=2.0)

# data augmentation moves
moves[4] <- mvNodeCHRS(ctmc=M, qmap=Q_like, tree=tree, lambda=0.2, type="biogeo", weight=2.0*n_nodes)
moves[5] <- mvPathCHRS(ctmc=M, qmap=Q_like, tree=tree, lambda=0.2, type="biogeo", weight=2.0*n_nodes)
moves[6] <- mvNodeCHRS(ctmc=M, qmap=Q_like, tree=tree, lambda=1.0, type="biogeo", weight=n_nodes)
moves[7] <- mvPathCHRS(ctmc=M, qmap=Q_like, tree=tree, lambda=1.0, type="biogeo", weight=n_nodes)



############
# Monitors #
############

# standard monitors
monitors[1] <- screenmonitor(printgen=10, glr[1], glr[2], dp)
monitors[2] <- modelmonitor(filename=out_fp+params_fn, printgen=10, separator=" ")

# character history monitors
monitors[3] <- mnCharHistoryNewick(filename="psychotria.counts.txt", ctmc=M, tree=tree, printgen=100, separator=" ", style="events")
monitors[4] <- mnCharHistoryNewick(filename="psychotria.counts.txt", ctmc=M, tree=tree, printgen=100, separator=" ", style="counts")
monitors[5] <- mnCharHistoryNhx(filename="psychotria.nhx.txt", ctmc=M, tree=tree, atlas=atlas, samplegen=100, maxgen=nGens, burnin=0.25, separator=" ")

########
# MCMC #
########

#my_mcmc <- mcmc(my_model, monitors, moves)
#my_mcmc.burnin(generations=nGens*fBurn, tuningInterval=100)
#my_mcmc.run(generations=nGens)

pow_p <- powerPosterior(my_model, moves, out_fp+"pp_dynamic_out.txt", cats=50) 
pow_p.burnin(generations=10000,tuningInterval=1000)
pow_p.run(generations=2000)  

### Use stepping-stone sampling to calculate marginal likelihoods
ss <- steppingStoneSampler(file=out_fp+"pp_dynamic_out.txt", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal() 

### Use path-sampling to calculate marginal likelihoods
ps <- pathSampler(file=out_fp+"pp_dynamic_out.txt", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal() 
