#include <iostream>#include <assert.h>#include "Argument.h"#include "ConstantNode.h"#include "DAGNode.h"#include "RbDouble.h"#include "RbFunction_ln.h"#include "RbFunction_pow.h"#include "RbFunction_sqrt.h"#include "RbObject.h"#include "RbException.h"int main(int argc, char **argv) {	// create function objects	RbFunction_sqrt sqrtFunc;	RbFunction_pow  powFunc;	RbFunction_ln   lnFunc;	// set the argmuents	RbDouble* w = new RbDouble(25);	RbDouble* x = new RbDouble(25);	RbDouble* y = new RbDouble(10);	RbDouble* z = new RbDouble(2);	// execute the function	ConstantNode* cnW = new ConstantNode(w);	ConstantNode* cnX = new ConstantNode(x);	ConstantNode* cnY = new ConstantNode(y);	ConstantNode* cnZ = new ConstantNode(z);		Argument* aSqrt = new Argument("x", cnW);	Argument* aLn   = new Argument("x", cnZ);	Argument* aBase = new Argument("x", cnX);	Argument* aExp  = new Argument("x", cnY);			try {	// test the sqrt function	std::vector<Argument*> args;	args.push_back( aSqrt );	RbObject* result = sqrtFunc.execute(args);	std::cout << "Testing Sqrt Function: " << w->toString() << std::endl;	result->print(std::cout);	// test the sqrt function	args.clear();	args.push_back( aBase );	args.push_back( aExp );	result = powFunc.execute(args);	std::cout << "Testing Pow Function: " << x->toString() << ", " << y->toString() << std::endl;	result->print(std::cout);		// test the log_e function	args.clear();	args.push_back( aLn );	result = lnFunc.execute(args);	std::cout << "Testing Ln Function: " << z->toString() << std::endl;	result->print(std::cout);	}	catch (RbException e)	{		std::cout << e.getMessage() << std::endl;	}	return 0;}