/**
 * @file
 * This file contains the declaration of RateMatrix_Pomo, which is a
 * class that holds a rate matrix combining population-level polymorphisms 
 * with inter-species divergence. Presented in De Maio, Schl√∂tterer and Kosiol, Molecular Biology and Evolution 30:10 2249-62 (2013).
 * Parameters:
 * N: Number of individuals in the idealized populations.
 * mu: matrix of ordered mutation rates of size 4*4: 12 mutation rates: AC, AG, AT, CA, CG, CT, GA, GC, GT, TA, TC, TG  describing mutations between monomorphic states
 * In the original publication, the model is symmetric: unordered mutation rates of size 6: AC, AG, AT, CG, CT, GT, CA=AC, GA=AG, etc...
 * s: vector of fitness parameters of size 4: sA, sC, sG, sT
// * pi: vector of root frequencies of size 4: piA, piC, piG, piT
 *
 * @brief Declaration of RateMatrix_Pomo, a matrix combining polymorphisms and substitutions
 *
 * (c) Copyright 2009-
 * @date Last modified: $Date: 2004-07-03 12:20:37 -0800 $
 * @author The RevBayes Development Core Team
 * @license GPL version 3
 *
 * $Id: RateMatrix_Pomo.h 1901 2014-07-03 06:15 boussau $
 */


#ifndef __RateMatrix_Pomo__
#define __RateMatrix_Pomo__

#include "RateMatrix.h"
#include <complex>
#include <vector>


namespace RevBayesCore {
    
    class TransitionProbabilityMatrix;
    
    class RateMatrix_Pomo : public RateMatrix {
        
    public:
        RateMatrix_Pomo(size_t n);                                                                                               //!< Construct rate matrix with n states
        RateMatrix_Pomo(const RateMatrix_Pomo& m);                                                                               //!< Copy constructor
        virtual                         ~RateMatrix_Pomo(void);                                                                  //!< Destructor
        
        // overloaded operators
        RateMatrix_Pomo&          operator=(const RateMatrix_Pomo& r);
        
        // RateMatrix functions
        double                          averageRate(void) const;
        void                            calculateTransitionProbabilities(double t, TransitionProbabilityMatrix& P) const;   //!< Calculate the transition probabilities for the rate matrix
        RateMatrix_Pomo*                clone(void) const;
        void                            updateMatrix(void);
        temp/ ( temp+N-1 )* ( N-1 ) /N theRateMatrix;
        
    private:
        size_t N;							 //!< Number of individuals in idealized population
        size_t matrixSize;                  //!< Number of elements in a row or column of the rate matrix 
        std::vector < std::vector < double > > mu;			//!< Matrix of 12 mutation rates and 0s elsewhere
        std::vector < double > s;					//!< Vector of 4 selection coefficients
        //	std::vector < double > pi;					//!< Vector of 4 root frequencies
        double precision;                  //!< Precision for exponentiation through repeated squaring 
        
        void buildRateMatrix(void);
        void computeExponentialMatrixByRepeatedSquaring(double t,  TransitionProbabilityMatrix& P );
        inline void squareMatrix( TransitionProbabilityMatrix& P,  TransitionProbabilityMatrix& P2);
    };
    
}

#endif /* defined(__RateMatrix_Pomo__) */
