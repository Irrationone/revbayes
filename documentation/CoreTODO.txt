TODO-list for the RevBayes core

INSTRUCTIONS
============

If you are interested in contributing, select an item from the general todo list
and put it on your own todo list. When you are done, put the item in the done list,
leaving your name and date so that others know whom to ask if they would like more
information about the implementation of this particular feature.

TODO - FEATURE ADDITIONS
========================
- Add class derived from list to hold genetic codes (the universal genetic code, etc);
  put a default but extensible list in the global workspace at initialization
- Create class derived from list to hold fixed rate matrices; put a default list in global
  workspace at initialization
- Create class to hold time intervals in the genetic record. Could be implemented as a list
  where each entry has a name and a time interval; the latter could be a vector of two
  positive real values or a special interval object (see next item). The class might have a method
  that gave you the interval of a named geological time period, or you could rely entirely on
  the string indexing functionality.
- Implement a class for intervals, containing two ordered values (min, max). Change the uniform
  distribution to take one interval parameter instead of taking two real value parameters. This
  will be a more robust way of specifying the uniform distribution.
- Implement an order function that orders the values in a vector. Introduce an ordered vector
  class (of MemberObject type).
- Implement some special kinds of matrices as MemberObject objects. They should support indexing
  into the elements (see Simplex for an example) and conversion to Real or +Real matrices, as
  appropriate. There should be special versions of some mathematical functions that can deal
  more efficiently with these special kinds of matrices. Examples of these special kinds of
  matrices might include rate matrix and transition probability matrix.
- Implement a StochasticProcess class with a CTMC instance that takes appropriate arguments.
  Among other things, the CTMC class should be able to return suitable probability distributions,
  such as the stationary probability distribution.
- Go through all functions and make sure they return true when throws() is called if they throw
  exceptions in their execute() function. Make sure type conversions match argument rules.
  Try to rewrite functions that throw into functions that do not have to throw.
- Make sure all primitive types and non-abstract ValueContainer classes except ValueContainer itself
  implement all arithmetic, comparison and logical operators. Make sure the corresponding versions
  of these functions are added to the global workspace based on the existing function templates
- Add the unary operator functions (_uminus, _uplus, _unot).
- Implement the unclamp and setval function (see the clamp function for pattern to follow). The setval
  function should call the setValue function of the StochasticNode object, and will be used to set
  initial values.
- Check that all clone() functions are pure virtual in abstract classes
- Go through RbNames.h, make sure redundant entries are removed. Make sure the remaining entries are consistent.
  Separate the names of the data types the user will see into a separate list (all classes derived from
  RbObject). Make sure all of these are single words (Rev syntax requires this).
- Add classes and functions for phylogenetic models:
  Category, CharacterState, Aminoacid, Codon,
  CTMCProcess, DNASequence, vectormult() for VectorCondLike,
  RateMatrix, IntegratorNode, sumproduct()
- Implement help system
- implement statistical distributions classes
- change distribution classes to call the static RbStatistics namespace
- add a global variable for the path separator
- add a Sequence class which holds the VectorCharacterData
- change names of classes and functions from hard-to-read abbreviations to full names (e.g. func_s -> functionSimplex, func_str -> FunctionStructure)
- Currently the gtr function only works for 4 states. Check if it wouldn't be more sensible to have a generic version which takes the number of states as a parameter (or reads it from the two simplices).
- The gtr function automatically rescales the matrix so that the average rate is 1.0. Check if this has no undesired side-effects. Users might set up a model which explicitly does not want a rescaled matrix!
- Remove the function to construct a simplex move because now we should have constructor functions taking care of this.
- Remove the struct in the TreeTopology class (TopologyChange) and insert instead a class. In general we should not use any structs if possible (http://geosoft.no/development/cppstyle.html)
- In many functions we use call by value of objects, although this is not necessary. A call by value for an object will always results into calling the copy constructor and passing a copy to the function, which is (very) slow. Instead we should use constant references and only a copy if we want to change the variable locally in the function. Currently found examples: OptionRule, FunctionTable, StringUtilities, StochasticReferenceRule, ReferenceRule, MemberFunction, DistributionFunction, ConstantValueRule
- Add a global WarningsListener. The listener for warnings should be singleton class to which all objects can add warnings, e.g. when a calculation produces NaN's but we didn't want to through an error but instead a warning and want to proceed with the calculations. The parser should either show the warnings immediately or provide the warning like in are when one calls warnings(). Perhaps warnings should be able to be suppressed.
- Better console navigation:
   * up-arrow should give previous command
   * left-arrow should move the cursor left
- Add a method to all MemberObjects (i.e. the base class) which returns a list of all members

TODO - BUGS
===========
- value slot does not take direct reference (a := b does not work like a := b + 0)
- numStates in DiscreteDistribution returns a size_t which might cause problems for too large number such as the topology distribution
- The following commands will produce a crash:
RevBayes > strings <- v("a","b")
RevBayes > str(strings)


Future Features Requests
========================
- Sebastian: DAG nodes should be member variables to which have then attributes and function. An example would be the clamp function which could then work like
> a ~ exp(1.0)
> a.clamp(1.0)
I think it might be more natural in some cases to have a functions such as clamp working on the DAG node instead of passing the DAG node as a variable. I think this functionality can be achieved if the parser first looks if the DAG node has the member or function and only if not checks whether the object contained in the DAG node provides such an element or function. However, I'm not if hiding/merging the DAG node with the object functionality from the point of the users makes sense, because they might get confused in the situations when they don't know why for the same object they can use a function in some cases and in other not.



Sebastian
=======
- Add classes and functions for phylogenetic models:
  TreePlate, Tree, TreeMove
- Implement a checkpoint/serialization system which can store and load the current workspace from/to a file
- Add some global mathematical constants: pi, e, ...
- Add a unique identifier for the tree topology
- Check if we should have one class for all types of tree topologies or rather separate classes for each topology type. Some stuff is more difficult if we have only one class, e.g. the identifier for multifurcating trees.

Seraina
======

Tracy
======



DONE - FEATURES
===============
- Reduce to one call on StochasticNode for prob ratio calculation, cover all four cases -- Fredrik
- Implement a Distribution class on Category variables. The stationary probability distribution
  of the CTMC class should be of this type -- Fredrik
- Make Func_s and Func_v templated -- Fredrik
- Find an implementation of function argument frame that allows efficient retrieval based
  both on argument sequence and argument label -- Fredrik
- Restructure RbFunction to only have one calling convention -- Fredrik
- Solve problem with partial template specialization in arithmetic functions -- Fredrik, 2011-06-24
- Update grammar with empty index elements in index lists, implement in SyntaxVariable -- Fredrik - 2011-07-02
- In grammar, allow declaration of containers with length specification. Support in parser -- Fredrik - 2011-07-02
- Support string indexing -- Fredrik - 2011-07-02
- Support variable expressions and variable expression function calls -- Fredrik - 2011-07-02
- Implement the str() function, which should call the printStruct function of the variable. Make sure
  all variables and value types deliver sensible output -- Fredrik - 2011-07-02 (more checking needed)
- Implement standard math functions: power, exp, ln -- Sebastian - 2011-07-21


FIXED BUGS
==========
- 1 + 1 throws an error because arguments cannot be match properly -- Fredrik 2011-06-30
- dexp(1.0,1.0) does not work (and I believe all other function call for the pdf of any other distribution neither) -- Fredrik 2011-06-30
- mismatched arguments could print the argument rules for the user -- Fredrik 2011-06-30
- if a typo happened, e.g. runif(0.0,1.0)) does not return anything -- Fredrik 2011-06-30
- a = b does not generate error -- Fredrik - 2011-06-30
- 1 / 2.71 ambiguous function call -- Fredrik 2011-06-30
- Better error message for missing variable -- Fredrik 2011-06-30
- If a function is not found, currently no message is reported -- Fredrik 2011-07-01

