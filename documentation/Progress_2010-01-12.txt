Subject:
More on RevBayes
From:
Fredrik Ronquist <fredrik.ronquist@nrm.se>
Date:
Tue, 12 Jan 2010 22:36:15 +0100
To:
Sebastian HÃ¶hna <sebastian.hoehna@gmail.com>, John Huelsenbeck <johnh@berkeley.edu>, Maxim Teslenko <maxkth@gmail.com>

Hi Gentlemen:

It has taken me much too long but now I have all the programming done (theoretically) to get the normal model to run through the parser and it all compiles and links (the code I am using, that is). The normal example actually exercises a lot of the parser code and most of the base classes we need in the program. There will obviously be a number of minor glitches and things to work out before it all runs; I hope to sort out those things in the next week or so. The test file I am using, specifying the normal model and the analysis, will be in the test/parser directory, together with the testParser executable.

I had hoped originally, as you know, that we could have something to show next week in Cesky Krumlov, but we are obviously not there just yet. It is important that we do not hurry too much through these stages in the project where we go back and forth a little on how to organize the base classes. It will pay off in the end, I am convinced, even if it is frustrating right now for all of us, especially for Sebastian I think. Even if we could have had a GTR model running next week, I don't think the students would have been particularly impressed without the ability to play around with the parser and different model specifications, and without access to help information. In addition, it just does not seem right to present such a powerful program in something like 15 to 20 minutes. Let's introduce RevBayes instead at a workshop that we organize in the summer, devoted entirely to RevBayes.

If Sebastian is interested, I would be happy to let him have about 20 minutes to talk about graphical model specifications in general and phylogenetic models in particular on Monday. But do you think it is wise to talk too much about our ideas now or should we wait until we are closer to publishing them?

Below is a quick run-down of the most important changes I have introduced in the RevBayes code. This should be the last time I make such large changes in the code.

1. Given that we calculated the number of argument rules in the C-style array twice in the code and did it incorrectly both times (!), I came to the conclusion that Sebastian was right in preferring an object-oriented solution so I use STL vector throughout now.

2. I like the compactness of the #defines in RbNames that John introduced but they are not as good as the old solution when you think about it. First, they do not reduce the memory footprint at all, they just insert replicate C strings all over the place. Second, you can't use them where you need STL strings. I converted the defines to const std::string, which is compact but does not have any of the drawbacks of the defines. Eventually we may want to hide them in one name space (RbNames) but I have not done that yet.

3. The dag structure is much better now I think. Constant nodes do not have parents so children nodes are now always variable nodes, only variable nodes need to know about keeping and restoring, only stochastic nodes need to know about likelihoods and priors etc. I managed to get most of the mcmc functions out of the dag, which I think is good. Eventually, I would like to remove also monitors and moves from the dag and place them in the mcmc object instead. Think about metropolis coupling, for instance, in which you may want to set moves and monitors separately for each chain. Or ML inference, for which moves in the DAG are irrelevant. It will not be difficult to associate the moves and monitors with the dag nodes in the mcmc object.

4. The model is now completely clean of mcmc functionality, which I think is good.

5. I introduced MemberObject, which is the base object for complex object with member variables and member functions that are exposed to the parser (the interface is defined in RbComplex). Look at distributions (exp, norm and unif) or moves to see examples of how you write derived classes exposed to the parser. I am pretty happy with this solution, it simplifies the programming of these objects quite a bit. The solution also deals with inheritance, function overloading, and quick repeat execution of member methods/functions with preprocessed arguments.

6. I introduced ConstructorFunction, which can be used to automatically create a constructor function for a complex object. It uses the rules (member rules) set up to manage the member variables. So, no need to write these functions unless you want to do something special.

7. I found a solution to automatically generate both distribution functions (pnorm, qnorm, rnorm etc) and distribution constructor functions (norm) automatically from the complex distribution object. I derive real-valued distribution objects from DistributionReal, which adds the p- and q- variants of the function (cdf and quantile).

8. I know John finds it convenient to have all the distribution functions in RbStatistics but I prefer to have them in the distribution objects themselves. For distributions like exp and unif, it seems silly to call a separate file for just one line of code.

9. I have the prior and likelihood ratio calculations done in the distribution objects. You can see even for the very simple distributions implemented so far that it is more efficient to calculate the ratios rather than calculating and storing the full probabilities. After all, this is one of the reasons MCMC works so well, that density ratios are easy to calculate.

10. Moves are now divided into SimpleMove and BlockMove (not programmed yet). The Simple moves are associated with stochastic nodes and do what you think. In line with the function solution, they get access to the Stochastic Node value so they can manipulate it rather than proposing an entirely new value, which involves construction and destruction. When the Move asks for a mutable value pointer, it gets the set of affected stochastic nodes in return. From these and the moved node itself, it is easy to calculate the prior and likelihood ratios. Block moves are associated with deterministic nodes and can get all the upstream stochastic nodes they need from the complex object inside the deterministic node. For instance, these stochastic nodes may include branches, nodes and topology from a tree object.

11. I have given the names quite a bit of thought. I do not like the Rb prefix so I have removed it from most classes except from some of the base objects and some utility objects, where I think it is needed or appropriate (like RbObject or RbNames). I like distributions, moves and functions to have similar names alluding to the function name or constructor function name. In general, I try to follow R or BUGS. For instance, the normal functions are termed "xnorm" in R, so I propose naming the distribution object "Dist_norm". Using the same ideas, the "source" function is named "Func_source". For the moves, I tried using names starting with m, e.g. "mscale" for the scale move. The class then becomes "Move_mscale" and the automatically created constructor function of the move will be named "mscale". This is all open to discussion, as long as we are consistent in naming the classes. I think it is important to name things in the front end (the language) and the back end similarly, decreasing the threshold for someone wanting to explore or contribute to the source code.

That was the short introduction. I will be starting to commit the code now; this should be the last time I commit a large chunk of code at the same time. I will be trying to get rid now of the most obviously redundant code but there will unfortunately be some work in adapting old code that is probably best done by you. I started working on old code a few weeks ago but I stopped when I felt I was spending a lot of time adapting code that was likely to be dead or doomed anyway.

I am still struggling with understanding all aspects of cmake. It appears that I need to modify all the CMakeList files manually, is that the way it is supposed to be? If so, I would prefer to have the files more nicely organized, for instance with one file per line, like I am doing for the parser test code.


Best,

Fredrik

