###############
# User help ###
###############

1) Improve on the ls-function (nicer output, subsets of function/types), implement an automatic method that generates a table of available function and add a search function throughout the help system.
Get some help information in there so users at least can see a neatly organized list of the available functions. Part of the ls(all=true) output could be used as a starting point for this. In fact, ls(all=true) was by far the most frequent function call we used.

2.1) The xml reader for the help information needs to be restructured. It should be possible to create paragraphs in longer pieces of text. It should be possible to create url links and links to other help topics. The references should be better structured. There should be a section with executable code. The output should be more beautiful.

2.2) Make sure all functions have an XML help file and make sure that the XML help file is displayed more nicely than it is currently. I have provided an example for the readCharacterData function but would like to elaborate a little more on it. Generally speaking, I want help information very similar to that available in R, with paragraphs, subsections and executable code like they do. I also think we should read the info on the fly instead of processing all of it on start-up. And the help XML files should be structured so that we can easily make a bunch of hyper-linked html pages from them in time for the workshop. Currently, the help directory only contains the readCharacterData.xml page and then a bunch of pages that were made in 2011 in connection with the RevBayes workshop in Berkeley. I am going to delete the latter because they are completely outdated.


3.1) In a similar vein, '? <object name>' or '<function_name>' should produce useful help information on the object and usage of the function if no XML help info is available. 

3.2) Sensible information for the common objects, such as vectors and models. For instance, if you define a model with the name 'mymodel', then typing 'mymodel' should return some kind of information about the model and its DAG components (like the functionality John programmed for the 2011 version of the core...). It would be quite helpful to programmers too.

3.3) The '? function-name' should print the usage of the function if there is no help for the function. Now it does not print any useful information at all. Just typing 'function-name', however, results in usage information, so this should be an easy fix.


4) If you do 'function_name' on an overloaded function you should get a list of the overloaded functions and their formal arguments, not a message that tells you how many overloaded functions there are and no information beyond that.




##############
### Output ###
##############

1) The 'type' and 'structure' functions are also essential. The 'structure' function is gone now (it was there in 2011) as far as I can tell. Imagine if a user could call 'structure' or 'struct' or 'str' on a member object to see the member variables and member functions with formal arguments. Extremely powerful. The 'type' function is still there and seems to produce sensible output. Also useful for beginners learning how to use the environment.
-> Sebastian: There are already additional useful functions:
 x <- readCharacterData("data/Primates.nex")[1] 
 x.members()
 x.methods()
although these might need some more work.


2) Relevant error messages. 


3) We had problems with an if else statement because we put the else on a new line, which is not possible in Rev. The error message was incomprehensible, however. Because this will be a common mistake, we should try to give a good error message if it is encountered in source files (actually, we could allow such constructs in source files if we put a little work into it). It is OK if Rev requires '} else' on the same line (I think it is necessary in the console window at least) but it would be helpful with a good error message alerting users to such mistakes.


4) Beautiful output to screen from the essential core functions like mcmc.run() and mcmc.burnin().


5) Currently, real numbers print their value with a fixed precision. We should make this a variable defined in the file RbSettings and provide a function in the RevLanguage to change this settings. Maybe there are also more situations than only the real numbers.




########################
### General Features ###
########################

1.1) Provide a mechanism for users to apply default moves. It is OK if the user has to instantiate default moves explicitly by calling something like model.applyDefaultMoves() but for most users it is not a good idea to require them to explicitly specify all the moves and all the monitors.
1.2) There is no warning if you forget to add a move to a stochastic unclamped variable so it is very easy to screw up also when you do know in principle what moves to apply.
1.3) Possibly, one could also give the user the option to use some default monitors here.


2) Implement a module building block system.
Make it possible to write functions that set up model, moves, and monitors, and return objects containing all three in a single object.


3) More posthoc analysis functions with similar attractive output. For instance, printing of consensus trees and parameter summary tables.
Sebastian: The map-function of a treetrace might be a starting point here.
3.1) CCP at nodes of MAP tree


4) Computational efficiency with MCMCMC and parallel code so that users can actually complete analyses in reasonable amounts of time. I cannot say much about current performance, I just expect there will be additional work required here from the speed I see in the debug version.


5) There is no seq function making it awkward to compute vectors of indices such as a vector of odd or a vector of even number that we needed for our analysis (in one version). It should be added.


6) We had problems writing compact code to find odd and even numbers. The seq function is not present. The mod operator ('%') is not present. We could not rely on integer division leading to integer results, that is i / 2 == i would always be false even if we set i to an even integer. We ended up writing more code than we should have needed to for generating these vectors. Should we consider integer division giving integer result? Should we consider adding the modulus operator? Probably yes on both points.


7) It would be sooo convenient to have ++ and -- operators. Perhaps also += and -=.


8) We really need a function for concatenating vectors. Should we implement a function like c() or overload the '+' operator for vectors (the latter is probably not a good idea)?


9) We need component-wise multiplication of vectors. Similarly, component- or element-wise subtraction, multiplication etc. What should these functions be called?


10) unclamp is missing.


11) Better console navigation:
(hint, implement readline lib...)
- up-arrow should give previous command
- left-arrow should move the cursor left
- tab completion

12) Add some global mathematical constants: pi, e, ...


13) exclude chars in alignment


14) automatic burnin


15) type casting so that exp can take in naturals as well:
RevBayes > a ~ unif(-1,1)
RevBayes > b := round(a)
RevBayes > exp(b)
Perhaps there is a general solution???


16) clear screen


17) error catching for moves when node is constant or deterministic


18) Add a log function that prints all statements including their output to a file


19) Implement a checkpoint/serialization system which can store and load the current workspace from/to a file.


20) Subscript operator using strings, e.g. assume that 'x' is a character matrix of the primates dataset, then 'x["Pan"]' should return the taxon 'Pan'. (This statement is equal to 'x.Pan'.)








