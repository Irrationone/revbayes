Some notes on RevBayes coding practices

Use no tabs insert 4 spaces instead.

No comment lines longer than about 80 chars

I prefer to duplicate abstract functions - useful reminder, no overhead

Either there should be no destructor, no copy constructor no assignment operator, OR there should just be an empty virtual destructor, OR all three should be implemented. Do not declare a destructor if none is needed. If you see a destructor declared, it should always be associated with an assignment and copy constructor declaration.

All classes with virtual functions have virtual destructor, empty if assignment operator and copy constructor not needed

Do not add copy constructor and assignment operator if not needed

Do not add getters and setters unless needed

Covariant return types are preferable to non-variant return types

Assignment operator needs to have return type the same as the class it belongs to and it needs to check for self assignment

Overloaded assignment operators are not needed as far as I can tell at this point. Overloaded euqals operators may not be needed either, I never use them.

Clone function has the same return type as the class it belongs to (co-variant return type)

Always add clone function.

Do not include more header files than necessary, use forward class declarations instead when possible. In headers, include project files first, system files then and finally forward declarations. One empty line between each set.

Add only brief Doxygen comments (one line for each function in the source file and a post comment for each member variable and function in the header file), unless the function is complicated and needs thorough commenting. Always add Doxygen comments. The post comments work as brief comments, so brief comments need not be provided for the functions themselves. NOTE added by JPH: Realize that the Doxygen comments are used in different ways. Those comments put in the declaration file (*.h) are used by Doxygen to generate brief descriptions of the variables or functions. Do keep these comments brief. Those comments put in the implementation file (*.cpp) are used to generate more descriptive comments about the function in the Doxygen generated document. So, for example, let's imagine I have a function called "foo". In the header file I might put

void  foo(void);    //!< Do foo to something

and in the header file I might put 

/** This function does foo to something. */
void FooClass::foo(void) {}

Be aware that the Doxygen-generated document will have two sections. One section listing each function and variable in the class with the brief statement taken from the declaration file. After that, the functions are listed with the brief and more verbose descriptions. In this made-up example, the statement in the implementation file does not add much to the Doxygen document. I would recommend leaving out any comment in these cases; or at least I would remove the Doxygen "/**" statement. In the implementation file, I suggest adding a Doxygen "/**" statement only if you have something significant to say in addition to the brief statement.

Static code should go inside functions if order of execution is important; probably a good idea in general.

Arrange files in CMakeLists.txt lists one file on each line so it is easy to check and verify presence/absence of files.

Tests using cmake should only include the relevant source files, not all source files.

Use general variable names that copy well, like "x" or "obj" instead of one-letter abbreviations of class names. For instance, instead of using an argument called "mc" in the copy constructor for MyClass, use "x", so that the argument is still valid if you want to use the MyClass code as a template for AnotherClass.

Always spell out void in formal argument specifications.

For names in RbNames, use ONE namespace with const std::string variables.

