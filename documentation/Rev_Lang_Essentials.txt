Assignment and argument passing in Rev
--------------------------------------

The Rev language has three assignment operators:
<- is value assignment; current value of rhs is assigned to lhs
:= is equation assignment; rhs expression is assigned to lhs, and evaluated
   every time the value of the lhs variable is requested
~  is tilde assignment; rhs must be a distribution constructor, and lhs becomes
   a stochastic node with that distribution

Variables can either be normal variables or references to other variables.
Variables can either be scalars or array variables. Indices are in square
brackets. A complete type specification takes the form

int     for an int variable
int&    for a reference to an int variable
int[]   for an int vector
int[]&  for a reference to an int vector

Internally, a variable is represented as a DAG node wrapping an RbObject
value object. Hence the distinction between a variable (the DAG node plus
its intenal value object) and a value (the value object without its wrapper).
Some variable types (notably those resulting from equation and tilde
assignments) have values that can change dynamically.

Note that there are only references to array variables, there are no
arrays of reference variables. Note also that there is a difference between
ordinary scalar objects that support subscripting, and true array objects
that allow full access to individual elements. Internally, the latter are
implemented as Container objects, while all RbComplex objects can support
subscripting. Scalar objects with subscripting only allow value assignment
to the elements. Array objects allow all kinds of assignments to the elements.
Currently, vector and matrix objects are implemented as scalar objects with
subscripting; they will be mutated to generic container objects when necessary,
if possible. Similarly, container objects support conversion to all relevant
types of complex scalar objects. Among other things, this design allows one
to distinguish between row and column vectors as different fundamental types.
It also automatically knows that simplex variables are special kinds of
vector variables. One can, of course, consider alternative designs.

Arguments are passed to functions either as value arguments or as reference
arguments. A reference argument can be modified by the function, while a value
argument is in principle passed as a copy (reference passing of the variable,
and const protection of the value may be used in the implementation for
efficiency reasons). The return type of a function can be either a value or
a reference.

The following examples illustrate how this is implemented in practice.

Assume:
f <- int function ( int x, int& y )  # x and y are symbols to be used in the function definition
g <- int& function ( int x, int& y ) # x and y are symbols to be used in the function definition
int     x, a
int&    y, b
int[]   c
int[]&  d


Value assignment
================

x <- f(a, b)
f is passed the value of a and the variable that b points to currently
f can change the value of the variable that b points to currently but not the value of a
f returns a temp int value, which is assigned to x

x <- f(b, a)
f is passed the value of the variable that b points to currently, and a reference to a
f can change the value of a but not the value of the variable that b points to currently
f returns a temp int value, which is assigned to x

x <- g(a, b)
Argument passing and effects in function g as above
g can only return a reference to b or a reference to another variable in its definition environment
   (not an internal temporary variable). Member functions have access to member variables in the
   current instance as the innermost frame in the definition environment.
x is assigned a copy of the value of the return reference
[NOTE: Allowing this is probably a bad idea, since a statement like this
possibly gives the user an unwanted effect. A better way might be to
mutate the lhs to a reference variable, if this type of assignment is
allowed.]

y <- f(a, b)
Argument passing, function effects and return as above
y is made a reference to the temporary value returned by f, that is, it essentially
   becomes the same as a regular int variable
[NOTE: This could be disallowed as a type mismatch. However, it is handy in many
circumstances. For instance, distribution parameters should be reference variables in
a DAG. However, sometimes one wishes to assign constant values to them. If reference
variables cannot hold temporary values, then one has to create named constant variables
first and then point the reference variables to them. So, for instance, x ~ exp(10) would
in that case not be allowed; one would have to do lambda <- 10; x ~ exp(lambda) to
create a stochastic node with a constant value for the rate parameter.]

y <- g(a, b)
Argument passing, function effects and return as above
y is assigned the reference returned by g, that is, it will point to the same variable
   as the reference returned by g

x <- c[a]
Current value of a is used as the index; current value of the element is assigned to x

x <- d[a]
Current value of a is used as the index
Value of this element in the vector currently referenced by d is assigned to x

y <- c[b]
Current value of variable referenced by b is used as the index
Given that c is a field variable and not an ordinary  complex object
   supporting subscripting, y becomes an alias of the variable corresponding
   to that element in c.

y <- d[b]
Current value of variable referenced by b is used as the index
Given that the variable pointed to by d is a field variable and not an
   ordinary complex object supporting subscripting, y becomes an alias of the
   variable corresponding to that element in the field that d points to.

y <- 10
A constant or an expression other than a variable expression on the rhs
   results in y pointing to a temp variable
[NOTE: This could be disallowed as a type mismatch but this is probably
a bad idea; see above.]


Equation assignment
===================

x := f(a, b)
A function node is set up containing the function call f and references to the variable a and
  to the variable that b points to currently
f can change the value of the variable that b pointed to but not that of a
x is assigned the resulting function node
The value of x is evaluated by executing f to obtain its current value. If the two argument
  variables change value, then the value of x is reevaluated by calling f again.

x := f(b, a)
A function node is set up containing the function call f and references to the variable that b
  points to currently, and a
f can change the value of a but not the value of the variable that b pointed to
x is assigned the resulting function node
The value of x is evaluated by executing f to obtain its current value. If the two argument
  variables change value, then the value of x is reevaluated by calling f again.

x := g(a, b)
A function node is set up containing the function call g and references to the variable a and
  to the variable that b points to currently
g can change the value of the variable that b pointed to but not that of a
x is assigned the resulting function node
The value of x is evaluated by executing g to obtain the current value of the reference it is
  returning. If the two argument variables change value, then the value of x is reevaluated by
  calling g again.
[NOTE: Could be disallowed as a type mismatch]

y := f(a, b)
Assignment and function effects as above
The value of y is evaluated by executing f to obtain its current value. That value is then
  reported as the value of y. If the two argument variables change value, then the value of y
  is reevaluated by calling f again.
[NOTE: Could be disallowed as a type mismatch]

y := g(a, b)
Assignment and function effects as above
The value of y is evaluated by executing g to obtain the current value of the reference it is
  returning. If the two argument variables change value, then the value of y is reevaluated by
  calling g again.

x := c[a]
A lookup node is set up containing references to the variables a and c
x is assigned the lookup node
The value of x is evaluated by obtaining the current value of a and then finding
  the value of that element in c. If a or c changes, x is reevaluated by a new lookup.
[NOTE: Could be disallowed as a type mismatch]

x := d[a]
A lookup node is set up containing references to the variable a and the variable that
   d points to currently
x is assigned the lookup node
The value of x is evaluated by obtaining the current value of a and then finding
  the value of that element in the variable that d pointed to. If a or the variable pointed
  to by d changes, x is reevaluated by a new lookup.
[NOTE: Could be disallowed as a type mismatch]

y := c[b]
A lookup node is set up containing references to the variable c and the variable that
   b points to currently
y is assigned the lookup node
The value of y is evaluated by obtaining the current value of the variable that b pointed
  to and then finding the value of that element in c. If the varibale pointed to by b or
  c changes, y is reevaluated by a new lookup.
[NOTE: This should probably be disallowed because it violates the basic logic that y should
be a direct reference. ]

y := d[b]
A lookup node is set up containing references to the variables that d and b point to
   currently
y is assigned the lookup node
The value of y is evaluated by obtaining the current value of the variable that b pointed
  to and then finding the value of that element in the variable pointed to by d. If the
  varibale pointed to by b or d changes, y is reevaluated by a new lookup.
[NOTE: This should probably be disallowed because it violates the basic logic that y should
be a direct reference]

Tilde assignments
=================
Assume the following distribution constructor function:
dist <- distributionType function (real& param1, real& param2)
 
x ~ dist(a, b)
A stochastic node is created with the distribution dist.
x is assigned the stochastic node. Its value is obtained from the
   distribution. The type of x must match the variable type of
   the distribution.

y ~ dist(a, b)
Illegal because y is a reference

x ~ f(a, b)
Illegal because f is not a distribution constructor

x ~ c[a]
Illegal because rhs is not a function call


Semantic value of assignments
===========================

The semantic value of an assignment is the same
as if the the assignment had been made first in a
separate statement, and the assignment in the second
statement is simply replaced by the variable. This
means, for instance, that chain assignment is possible
both for value and reference variables.


Notes on special types
======================

Field arrays (plates) and objects with member variables and methods
are treated internally as special types of variable DAG nodes. They
are variable in the sense that their value is composed of the value
of other variables, each of which could potentially change over time.
Even if all component variables were constant at some point in time,
future user actions, such as various assignments, could change them
so that they became nonconstant. The component variables are parents
of the corresponding ContainerNode or MemberNode nodes in the DAG.


Repeated assignment
===================

The following special rules apply if the lhs variable of an assignment
expression already exists.

1. If the variable is a stochastic node and a value is assigned to it,
   the value is used as the current value of the stochastic node; the
   variable is not changed to a constant node.
2. If the variable is a constant node and a distribution is assigned to it,
   the variable is mutated to a stochastic node with the previous value
   maintained.

In all other cases, the current lhs variable is replaced with a new
variable resulting from evaluation of the rhs.


Type conversion
===============

If the rhs has the wrong type, then type conversion of the rhs to the lhs
type is first tried. If this is not possible, then an attempt is made to
replace (mutate) the lhs variable to the rhs variable type. If it is success-
ful, the new lhs variable will replace the existing lhs variable in the DAG.


Implementation
==============

Value assignment
----------------

Call getValue() on rhs. Return variable should be a temp (no slot, no name) or a reference
   (both slot and name, or a container). It could also be NULL.

If lhs does not exist:
    Throw an error if the value is NULL. Otherwise, add a new variable with the type of the
    rhs, and use the slot.setVariable function.

If lhs is NULL


If lhs is a reference (determine from variable, which does it from frame):
Processing of rhs is the same. If rhs is not a reference, treat lhs reference as a
   reference to its own internal (temp) variable. Type conversion should not be done for a
   reference except for the case of converting a temp value (once) to
   the right type.

If lhs exists and is not a reference (determine from variable, which does it from frame):
If the result is not the right type:
   - Check if it is convertible (once) to the right type. If so, convert it to the right type.
     Otherwise check if the lhs is mutatable to the result variable and throw an error if it
     is not possible.
Assign the result variable to the x slot, replacing any existing variable there.


Equation assignment
-------------------

Call getDAGNodeExpr on rhs, which should result in a lookup node or a function node. For variable
   expressions, we are simply interested in getting the variable pointer in the slot, regardless of 
   whether it is a reference or value variable.
   
With no index expression, we can simply return the variable ptr without wrapping it in a lookup.
   Similarly, if we have a permanently constant index expression (either constants or temp references to constants),
   we can also pass the element variable ptr directly without wrapping it in a lookup node.

If type conversion is needed, we first check if the rhs can be converted (always) to the type of the lhs.
   If so, a converternode is inserted. If not, then we test whether the lhs can be mutated so that it
   can receive the original lookup or function node.

If the lhs is a reference, the equation assignment is invalid.
If the lhs does not exist, we create it


Tilde assignment
----------------

If the lhs is a reference, the assignment is illegal. No type conversion is allowed on
   the rhs, but mutation of the lhs is allowed. Argument passing in the function call
   is as in an equation expression.

The rhs is called to get a distribution, a stochastic node is created, and the lhs is
   assigned the result.
   
   
Argument passing to functions
-----------------------------

Two cases need to be distinguished:

1. Getting the value of the function for the evaluation of a value expression.
   
We call getValue() and use the result variable as the argument. If the 
base syntax element is a variable or an assign expression or a function call,
we get the resulting variable that should be used as the reference (just call
its getVariable() method or use it directly). Type conversion is done once,
if needed (in ProcessArguments), but this means that we pass in a temp to any
reference argument, and therefore cannot manipulate its value.
      
2. We are interested in converting the function call to a function node as part of an
equation expression (or argument expression for a distribution constructor function).

We use getDAGNodeExpr() to get a dynamic way of obtaining the value to be passed in.
It is possible to get rid of the LookupNode in some cases (see above) but it is not
critical. If needed, we insert a converternode to do type conversion, after checking
that type conversion can always be done safely. We do not know before matching the
function call to a function which arguments are reference arguments and which arguments
are value arguments. Also, we cannot do type conversion until we have exhausted the
possibilities of finding an exact argument match, and found the best fit after potential
type conversion. If the argument is a reference argument, we call getVariable to get
the variable referred to. The getVariable() function will return the full value
of a FunctionNode or the full variable result of a LookupNode. In all other cases
it will return the DAGNode itself. If a converter node is used for a reference argument,
this means that we pass in a temp, and cannot manipulate its value.