############################################################################################
#   File: timetree tutorial ACLN relaxed-clock model specification file
############################################################################################

#################################################
########### ACLN model on node rates ###########
#################################################

### the variable for the base rate
### with a lognormal prior
### and a scale move
br_M <- 5.4E-3
br_s <- 0.05
br_mu <- ln(br_M) - ((br_s * br_s) * 0.5)
base_rate ~ dnLnorm(br_mu, br_s)
moves[mi++] = mvScale(base_rate,lambda=0.25,tune=true,weight=5.0)

### set up the variance parameter of the ACLN model 
### and assign it a scale proposal
nu ~ dnExponential(1.0)
moves[mi++] = mvScale(nu, lambda=0.5, tune=true, weight=4.0)

### the clock rate at the root of the tree
### with a scale move
root_rate ~ dnGamma(2.0, 4.0)
moves[mi++] = mvScale(root_rate, lambda=0.5, tune=true, weight=4.0)


### get the number of branches in the tree
n_branches <- 2 * n_taxa - 2

### a vector of the rates at each node
### from the ACLN model, which is conditioned on the tree, nu, the root rate, and base rate
# node_rates ~ dnACLN(timetree, nu, root_rate, base_rate)
node_rates[n_branches+1] := root_rate

### the rate at each branch is the average of the rate at each node separated by that branch
### a special core function is used to calculate the rate for branch i
for(i in n_branches:1) {
   node_var[i] :=  nu * timetree.branchLength(i) * base_rate
   # the mean of the LN dist is parentRate = exp[mu + (variance / 2)],
   # where mu is the location param of the LN dist (see Kishino & Thorne 2001)
   node_mean[i] := node_rates[timetree.parent(i)] - (node_var[i] * 0.5)
   node_rates[i] ~ dnLnorm(node_mean[i],node_var[i])

   moves[mi++] = mvScale(node_rates[i], lambda=0.5, tune=true, weight=4.0)
   
   branch_rates[i] := ((node_rates[i] + node_rates[timetree.parent(i)]) * 0.5) * base_rate
}

### a deterministic node to monitor, the average node rate
mean_rt := mean(node_rates)

### set up the GTR model and instantaneous rate matrix from file
source("RevBayes_scripts/m_GTR.Rev")

### the full phylogenetic CTMC
phySeq ~ dnPhyloCTMC(tree=timetree, Q=Q, branchRates=branch_rates, nSites=n_sites, type="DNA")

### attach the observed sequence data
phySeq.clamp(D)


