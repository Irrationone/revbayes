# by Will Freyman
#
# source("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/chromosome_real_joint.Rev")
#

######################
# read in the data 
######################

# This is an example using the basic chromosome CTMC model using real data from Mayrose et al. 2010.
# read the data 
# The data was altered because Aristolochia_taliscana and Aristolochia_tentaculata are sisters on 0 length branches,
# yet are supposed to have chromosome numbers of 6 and 7 respectively. This causes a bug in MonteCarloSampler.cpp "Could not compute lnProb for node seq"
# therefore both species are set to chromosome number 7. This bug could probably be fixed by setting all 0 branch lengths to 0.000001 or something...
chromoData <- readTSVCharacterData("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/data/matK_chromosomes_real.tsv", type="Chromosomes")

# get DNA sequences
matK_seq <- readCharacterData("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/data/matK_treebase_aligned.fas")

# read in the starting tree that is consistent with our outgroup constraints
# this is a ML tree, so should be a pretty good start for the MCMC
starting_tree <- readBranchLengthTrees("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/data/matK_tree_lengths.nwk")[1]

# Get some useful variables from the data. We need these later on.
n_species <- matK_seq.ntaxa()
n_sites <- matK_seq.nchar(1)
names <- matK_seq.names()
n_branches <- 2 * n_species - 3

# get ingroup and outgroup for constraints
ingroup <- ["Aristolochia_serpantaria","Aristolochia_arborea","Aristolochia_wardiana","Aristolochia_californica","Aristolochia_saccata","Aristolochia_mollisima","Aristolochia_tomentosa","Aristolochia_neolongifolia_SETS52","Aristolochia_neolongifolia_SETS96"]
i <- 1
for (j in 1:names.size()) {
    found <- false
    for (k in 1:ingroup.size()) {
        if (ingroup[k] == names[j]) {
            found <- true
            break
        }
        k++
    }
    if (!found) {
        outgroup[i] <- names[j]
        i++
    }
    j++
}
mi <- 0
clade_ingroup <- clade(ingroup)
clade_outgroup <- clade(outgroup)
constraints <- v(clade_ingroup, clade_outgroup)


##############
# Tree model #
##############

# specify a uniform prior on the tree topology
topology ~ uniformTopology(n_species, names, constraints)

# use the starting tree consistent with constraints
topology.setValue(starting_tree.topology())

# moves on the topology
mi <- 0
moves[mi++] <- mvNNI(topology, weight=10.0)
#moves[mi++] <- mvSPR(topology, weight=5.0)

# create a random variable for each branch length
for (i in 1:n_branches) {

    # branch length priors exponential distribution with rate 1.0
    br_lens[i] ~ dnExponential(10.0)

    # add a simple scaling move since the branch length is a positive real number
	moves[mi++] <- mvScale(br_lens[i], lambda=2, tune=true, weight=1)

}

TL := sum(br_lens)

# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)



######################
# Substitution Model #
######################

#### specify the GTR substitution model applied uniformly to all sites ###
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[mi++] <- mvSimplexElementScale(er, alpha=10, tune=true, weight=3)


pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves[mi++] <- mvSimplexElementScale(pi, alpha=10, tune=true, weight=2)


#### create a deterministic variable for the rate matrix ####
Q := gtr(er,pi)




###################
# Sequence evolution continuous-time Markov chain (CTMC)
###################

# the sequence evolution model
seq ~ phyloCTMC(tree=phylogeny, Q=Q, branchRates=1.0, type="DNA")

# attach the sequence data
seq.clamp(matK_seq)




#######################
# Chromosome Model
#######################

# rate of chromosome gains
lambda ~ exponential(10.0)

# rate of chromosome losses
delta ~ exponential(10.0)

# rate of polyploidization
rho ~ exponential(10.0)

# max number of chromosomes
max_chromo <- 26

# create rate matrix
R := chromosomes(max_chromo, lambda, delta, rho)

# do not assume stationarity
root_frequencies := simplex(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
#root_frequencies := simplex(rep(max_chromo, 1))

# set up moves
moves[mi++] <- mvScale(lambda, lambda=1, tune=true, weight=1) 
moves[mi++] <- mvScale(delta, lambda=1, tune=true, weight=1) 
moves[mi++] <- mvScale(rho, lambda=1, tune=true, weight=1) 





###############
# Chromosome continuous-time Markov chain (CTMC)
###############
chromo ~ phyloCTMC(Q=R, tree=phylogeny, rootFreq=root_frequencies,type="Chromosomes")

# clamp data
chromo.clamp(chromoData)




##################
# Finalize the integrated model and set up MCMC
##################

mymodel <- model(phylogeny)

# create the monitors
monitors[1] <- screenmonitor(printgen=10, lambda, delta, rho, TL)
monitors[2] <- filemonitor(filename="/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint.trees", printgen=10, separator = "	", phylogeny)
monitors[3] <- mnAncestralState(filename="/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint.log",printgen=10, separator = "	", tree=phylogeny, ctmc=chromo, type="Chromosomes")
monitors[4] <- modelmonitor(filename="/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint_model.log",printgen=10, separator = "	")
#monitors[5] <- mnAncestralState(filename="/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint_dna.log",printgen=10, separator = "	", branchlengthtree=phylogeny, character=seq, type="DNA")


# set up mcmc
mymcmc <- mcmc(mymodel, monitors, moves)
#mymcmc.burnin(generations=100,tuningInterval=10)
mymcmc.run(5000)


# Summarize the results, first get the MAP tree.
# These steps are necessary because the topology was not fixed.
treetrace <- readTreeTrace("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint.trees", treetype="non-clock", separator="	") 
map <- mapTree(treetrace,"/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint_map.tree")

# now summarize ancestral states over the MAP tree
ancestral_state_trace <- readAncestralStateTrace("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint.log", separator="	")
ancestral_state_tree_trace <- readAncestralStateTreeTrace("/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint.trees", treetype="non-clock", separator="	")
ancestralStateTree(map, ancestral_state_trace, ancestral_state_tree_trace, "/Users/mucho/Documents/projects/revbayes/revbayes/tutorials/RB_Chromosomes/output/chromosomes_joint_final.tree")
