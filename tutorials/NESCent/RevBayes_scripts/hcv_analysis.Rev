##seed(1503, 21489)
printSeed()


D <- readCharacterData(file="data/HCV_data.nex")

## Starting tree from BEAST2 run
T <- readTrees("data/HCV_data_start.tre")[1]


n_taxa <- D.ntaxa()
n_sites <- D.nchar(1)
names <- D.names()


## Priors from Stadler et al. (2013)
origin ~ dnLnorm(1.0, 1.25)
origin

origin.setValue(treeHeight(T) * 1.2)
origin


## Setting the vector of parameter change times
n_intervals <- 10 
change_times <- n_intervals - 1

## This produces a vector of relative times from youngest -> oldest 
## The absolute times are a function of the origin time
for(i in 1:change_times){
	p_rel_times[i] <- abs((i * (1.0 / n_intervals))) 
	p_abs_times[i] := origin * p_rel_times[i]
}


p_abs_times

s[1] <- 0.0 # samplingProportion (or psi)

## Creating vectors of m deterministic nodes for the changing parameters
## R0 and delta (delta = becomeUninfectiousRate in BEAST2)
for(i in 1:n_intervals){
	delta[i] ~ dnLnorm(1.0, 1.25) # delta : mu = delta - s*delta
	delta[i].setValue(1.0)
	R0[i] ~ dnLnorm(1.0, 1.25)
	R0[i].setValue(2.0)
	lambda[i] := R0[i] * delta[i]
}
							

delta
R0
lambda

## These data are contemporary, so only 1 value for rho
rho[1] ~ dnBeta(1.0, 9999.0)
rho[1].setValue(1e-6)

## some deterministic nodes to monitor
rn_0 := R0[1]
uir_0 := delta[1]
l_0 := lambda[1]


# the BD-skyline model
tau ~ dnSkySerialBDP(origin=origin, lambda=lambda, lambdaTimes=p_abs_times,
					 mu=delta, muTimes=p_abs_times,
					 psi=s,
					 rho=rho,
					 timeSinceLastSample=0.0,
					 condition="survival", names=names)

## The current model does not initialize properly
tau.setValue(T)


th := treeHeight(tau)

tau.lnProb

## setting the clock rate from "ad_e1_type4_rev.xml" BEAST2 file
clock_rate <- 0.79e-3

## GTR model
bf <- v(1,1,1,1)
e <- v(1,1,1,1,1,1)
sf ~ dirichlet(bf)
er ~ dirichlet(e)

sf

er

Q := gtr(er,sf)

## putting it all together
phySeq ~ phyloCTMC(tree=tau, Q=Q, branchRates=clock_rate, nSites=n_sites, type="DNA")
phySeq.clamp(D)


## specifying moves
mi <- 0
for(i in 1:n_intervals){
	moves[mi++] <- mvScale(delta[i], lambda=0.5, tune=false, weight=2.0)
	moves[mi++] <- mvScale(R0[i], lambda=0.5, tune=false, weight=2.0)
	moves[mi++] <- mvScale(delta[i], lambda=1.5, tune=false, weight=2.0)
	moves[mi++] <- mvScale(R0[i], lambda=1.5, tune=false, weight=2.0)
}
moves[mi++] <- mvScale(rho[1], lambda=0.01, tune=false, weight=3.0)
moves[mi++] <- mvOriginTimeSlide(origin, tau, delta=3.75, tune=true, weight=3.0)
moves[mi++] <- mvOriginTimeSlide(origin, tau, delta=10.0, tune=false, weight=1.0)
moves[mi++] <- mvOriginTimeSlide(origin, tau, delta=0.75, tune=false, weight=1.0)
moves[mi++] <- mvNodeTimeSlideUniform(tau, weight=30.0)
moves[mi++] <- mvRootTimeSlide(tau, delta=3.75, tune=true, weight=5.0)
moves[mi++] <- mvTreeScale(tau, 1.0, true, 3.0)
moves[mi++] <- mvNNI(tau, weight=8.0)
moves[mi++] <- mvNarrow(tau, weight=8.0)
moves[mi++] <- mvFNPR(tau, weight=8.0)
moves[mi++] <- mvSubtreeScale(tau, weight=5.0)
moves[mi++] <- mvSimplexElementScale(er, alpha=10.0, tune=true, weight=3.0)
moves[mi++] <- mvSimplexElementScale(sf, alpha=10.0, tune=true, weight=3.0)

mymodel <- model(er)

monitors[1] <- filemonitor(filename="hcv_skybdp.log", posterior=true, prior=true, 
							likelihood=true, printgen=10,
							origin, th, rho, R0, delta, lambda, er, sf, p_abs_times)
monitors[2] <- filemonitor(filename="hcv_skybdp.trees",printgen=10, tau)
monitors[3] <- screenmonitor(printgen=10, origin, rho, th, rn_0, uir_0)

mymcmc <- mcmc(mymodel, monitors, moves)

#mymcmc.burnin(generations=1000,tuningInterval=100)
mymcmc.run(generations=40000)

##mymcmc.operatorSummary()

