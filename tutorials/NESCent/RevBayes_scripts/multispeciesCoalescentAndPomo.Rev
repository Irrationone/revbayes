################################################################################
#
# RevBayes Example: Simulation and species tree inference using the multispecies coalescent and the Pomo model.
#
# 
# This file: Specifies the full Multispecies coalescent model, simulates data, 
# and then performs inference under it. Then specifies the Pomo model, 
# combines the sequence data into a Pomo matrix, and performs inference 
# using the Pomo model.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################


######################################
######################################
########## Simulating Data ###########
######################################
######################################

# We choose to simulate data in a manner that resembles Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
# Differences include the number of species (10 in our case instead of 5 in their case), 
# and the model of sequence evolution (GTR+relaxed clock+ASRV in our case instead of JC69 in their case).

#For conveniency, we define a data folder in which we will save the output of our work.
dataFolder<-"/Users/boussau/sharedFolderLinux/revBayes/revbayes-code-git/examples/test/"
setwd(dataFolder)

# Let's simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species, 
# and along each gene tree one gene alignment 500 bases long.
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 500
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

######################
# Species-Tree model #
######################

# Species names
for (i in 1:n_genes) {
	s_names[i] <- "Species_"+i
}

# Birth-Death process priors, similar to Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
speciation ~ exponential(10.0)
extinction ~ exponential(10.0)
tree_height ~ unif(0,100.0)
speciation.setValue(2)
extinction.setValue(0.3)
tree_height.setValue(0.008)

# Species tree from birth-death process
speciesTree ~ cBDP(lambda=speciation, mu=extinction, origin=tree_height, nTaxa=n_species, names=s_names)

# Making a backup for future reference:
trueSpeciesTree <- speciesTree

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
#		g_names[(i-1)*n_alleles+j] <- s_names[i]+"_"+j
	}
}

# Set the effective population size
Ne ~ gamma(shape=0.1,rate=0.1)
Ne.setValue(0.004)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnConstPopMultispCoal(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
}

# For fun, let's look at the symmetric differences between the simulated gene tree topologies:
ndiff <- 1
for (i in 1:(n_genes-1)) {
	for (j in (i+1):n_genes) {
		diff[ndiff]<-symDiff (geneTrees[i], geneTrees[j]) 
		ndiff <- ndiff+1
	}
}

# The distances show that the gene trees are very dissimilar, because the maximum symmetric difference is 
# 2*(number of internal branches), which is equal to:
maxDiff <- 2 * (n_species*n_alleles - 2)

# Making a backup for future reference:
trueGeneTrees <- geneTrees
trueNe <- Ne

#######################
# Substitution Models #
#######################

# Here we assume that all genes share the same basic substitution model, a GTR.
# However, the parameters of the models change from one gene family to the next.
for (i in 1:n_genes) {
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])

  Q[i] := gtr(er[i],sf[i]) 

}

# Making a backup for future reference:
for (i in 1:n_genes) {
	trueEr[i] <- er[i]
	trueSf[i] <- sf[i]
}


###############
# Clock Model #
###############

# Here we assume a simple strict clock model. 
# However, each gene family can have its own rate of evolution.
# Those rate parameters are drawn independently from an exponential distribution.
# This makes it possible to have large differences in rates of evolution between two different gene families. 

for (i in 1:n_genes) {
  familyRates[i] ~ exponential(1.0)
}

# Making a backup for future reference:
for (i in 1:n_genes) {
  trueFamilyRates[i] <- familyRates[i] 
}


#############################
# Among Site Rate Variation #
#############################

# As for the substitution model and the clock model above, 
# we assume that each gene family has its own set of parameters. 
# Rate variation across sites is handled by a discretized Gamma distribution.

for (i in 1:n_genes) {

  shape_prior[i] <- 0.05 
  shape[i] ~ dnExponential( shape_prior[i] )
#  shapeBis[i] := shape[i]
#  norm_gamma_rates[i] := discretizeGamma( shape[i], shapeBis[i], 4, false )
	norm_gamma_rates[i] := discretizeGamma( shape[i], shape[i], 4, false )

}


###################
# PhyloCTMC Model #
###################

# Here we simulate gene family alignments.
# To link all the parts of the model together we use the phyloCTMC object.

for (i in 1:n_genes) {
  alns[i] ~ phyloCTMC(tree=geneTrees[i], Q=Q[i],  branchRates=familyRates[i], siteRates=norm_gamma_rates[i], nSites=n_sites, type="DNA")
}


######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree, the gene trees, and the gene alignments
# Saving the species tree
write(speciesTree, filename="speciesTree")

# Saving the gene trees
for (i in 1:n_genes) {
	write(geneTrees[i], filename="geneTree_"+i)
}

# Saving the gene alignments
for (i in 1:n_genes) {
	writeFasta(alns[i], filename="alignment_"+i+".fasta")
}


########################################################################
########################################################################
####### Performing inference under the Multispecies Coalescent #########
########################################################################
########################################################################



############################################
# Clamping the model to our simulated data #
############################################
for (i in 1:n_genes) {
	alns[i].clamp(alns[i])
}


################################
# Changing the starting values #
################################

# We want to start from random values, not the values used in the simulation.

# Redrawing the parameters of the birth-death process:
speciation.redraw()
extinction.redraw()
tree_height.redraw()

# Redrawing the species tree:
speciesTree.redraw()

# Redrawing the parameter Ne:
Ne.redraw()


# Redrawing the gene trees:
for (i in 1:n_genes) {
   geneTrees[i].redraw()
}

# Redrawing the parameters of the substitution models:
for (i in 1:n_genes) {
  er[i].redraw()
  sf[i].redraw()
}

# Idem for the family-wise rates of sequence evolution:
for (i in 1:n_genes) {
  familyRates[i].redraw()
}

# Idem for the family-wise across-site rate variation parameters:
for (i in 1:n_genes) {
  shape[i].redraw()
}


####################
# Setting up moves #
####################

# We need to set up moves for the birth-death parameters, the species tree topology, the gene tree topologies, 
# the parameter Ne, the parameters of the substitution models, the rates on the gene trees.

moveIndex <- 0


# moves for the birth-death parameters
moves[moveIndex++] <- mvScale(speciation,1,true,1.0) # In the revLanguage, table indices start at 1
moves[moveIndex++] <- mvScale(extinction,1,true,1.0)
moves[moveIndex++] <- mvSlide(tree_height,delta=1.0,true,2.0)


# moves on the tree topology and node ages
moves[moveIndex++] <- mvNNI(speciesTree, 1.0)
moves[moveIndex++] <- mvFNPR(speciesTree, 1.0)
moves[moveIndex++] <- mvSubtreeScale(speciesTree, 5.0)
#moves[moveIndex++] <- mvTreeScale(speciesTree, 1.0, true, 3.0)
moves[moveIndex++] <- mvNodeTimeSlideUniform(speciesTree, 10.0)
moves[moveIndex++] <- mvRootTimeSlide(speciesTree, 1.0, true, 3.0)

# moves on the gene tree topologies and node ages
for (i in 1:n_genes) {

   moves[moveIndex++] <- mvNNI(geneTrees[i], 1.0)
   moves[moveIndex++] <- mvFNPR(geneTrees[i], 1.0)
   moves[moveIndex++] <- mvSubtreeScale(geneTrees[i], 5.0)
#   moves[moveIndex++] <- mvTreeScale(geneTrees[i], 1.0, true, 3.0)
   moves[moveIndex++] <- mvNodeTimeSlideUniform(geneTrees[i], 10.0)
   moves[moveIndex++] <- mvRootTimeSlide(geneTrees[i], 1.0, true, 3.0)

}

# move on Ne, the effective population size
moves[moveIndex++] <- mvScale(Ne,1,true,1.0)

# moves on the parameters of the substitution models
for (i in 1:n_genes) {
  moves[moveIndex++] <- mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 
  moves[moveIndex++] <- mvSimplexElementScale(sf[i], alpha=10, tune=true, weight=2) 
}

# moves on the family-wise rates
for (i in 1:n_genes) {
  moves[moveIndex++] <- mvScale(familyRates[i], lambda=0.8, tune=true, weight=3.0)
}

# moves on the across-sites rate variation parameters:
for (i in 1:n_genes) {
  moves[moveIndex++] <- mvScale(shape[i], lambda=0.8, tune=true, weight=3.0)
}






############
# Monitors #
############

# We define a few monitors to keep track of how things go.

mntrIndex <- 0

# One monitor to backup the parameters, in case we want to stop and restart the analysis:
monitors[mntrIndex++] <- modelmonitor(filename="multispeciesCoalescent_clock.log",printgen=10, separator = "	")

# One monitor to print the species trees sampled in the course of the MCMC:
monitors[mntrIndex++] <- filemonitor(filename="multispeciesCoalescent_clock_species.trees",printgen=10, separator = "	", speciesTree)

# One monitor for each gene family tree:
for (i in 1:n_genes) {
   monitors[mntrIndex++] <- filemonitor(filename="multispeciesCoalescent_clock_gene_"+ i +".trees",printgen=10, separator = "	", geneTrees[i])
}

# We also want to monitor how far we are from the true values, which we have because we rely on simulations.
# First, we can compute the distance between the reconstructed and the true species tree:
distSpeciesTree := symDiff (trueSpeciesTree, speciesTree)

# Same thing for the gene trees:
for (i in 1:n_genes) {
	distGeneTree[i] := symDiff (trueGeneTrees[i], geneTrees[i])
}

# We get one average value for all gene trees:
meanDistGeneTree := mean(distGeneTree)

# We can also look at the parameter values
# For Ne:
distNe := Ne - trueNe



# For equilibrium values of the GTR matrices, we want one index of how far we are.
# To achieve this we need to write some functions:
clear(i)

function RealPos diffVectors ( Simplex xvec, Simplex yvec ) { 
	DI <- 0.0
	for (i in 1:xvec.size()) {
		DI <- DI + (xvec[i] - yvec[i])*(xvec[i] - yvec[i])
	}
	return DI
}

function RealPos diffVectorsOfVectors ( Simplex[] xvecvec, Simplex[] yvecvec ) { 
	DA <- 0.0
	for (i in 1:xvecvec.size()) {
		DA <- DA + diffVectors(xvecvec[i], yvecvec[i])
	}
	return xvecvec[2]
}

distEqFreq := diffVectorsOfVectors(trueSf, sf)
	
					
	
function RealPos diffVectors ( Real[] xvec, Real[] yvec ) { 
	DI <- 0.0
	for (i in 1:xvec.size()) {
		DI <- DI + (xvec[i] - yvec[i])*(xvec[i] - yvec[i])
	}
	return DI
}

function RealPos diffVectorsOfVectors ( Real[][] xvecvec, Real[][] yvecvec ) { 
	DA <- 0.0
	for (i in 1:xvecvec.size()) {
		DA <- DA + diffVectors(xvecvec[i], yvecvec[i])
	}
	return DA
}


	
	
# Same thing for exchangeability parameters:
distExchange := diffVectorsOfVectors(trueEr, er)
monitors[mntrIndex++] <- screenmonitor(printgen=10, distExchange)
	
# Same thing for the family-wise rates
distRates := diffVectors(trueFamilyRates, familyRates)
monitors[mntrIndex++] <- screenmonitor(printgen=10, distRates)


# We can use one monitor that will output on the screen one parameter, Ne, distNe, distSpeciesTree, meanDistGeneTree, and distEqFreq:
monitors[mntrIndex++] <- screenmonitor(printgen=10, Ne, distNe, distSpeciesTree, meanDistGeneTree, distEqFreq)
	
# We could do similar things for the few remaining parameters, but really I think that's enough.

#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we choose to use the species tree.
 
mymodel <- model(speciesTree)



########
# MCMC #
########

# We create the MCMC object
mymcmc <- mcmc(mymodel, monitors, moves)


# We launch the analysis, and specify the burnin (iterations that will not be considered for analysis), 
# the number of iterations that will be considered for analysis, 
# and the tuning interval for tuning parameters of moves on scalar variables.
# Note that one mcmc iteration includes 33 proposal (incl. accept/reject) which is the number of moves times their weight.
# If you choose more or different proposals, or different weights for the proposals, then the number of proposals changes per iteration.
# mymcmc.burnin(generations=200,tuningInterval=100)
mymcmc.run(generations=400)



###################
# Output analyses #
###################

# Now, we will analyze the tree output.
# Let us start by reading in the tree trace
 treetrace <- readTreeTrace("multispeciesCoalescent_clock_species.trees")
# and get the summary of the tree trace
 treetrace.summarize()

# We output the Maximum A Posteriori tree
 mapTree(treetrace,"primates_clock_MAP.tre")





###########################################################
###########################################################
####### Performing inference under the POMO model #########
###########################################################
###########################################################

# Now we're going to analyze the same data, but this time using the POMO model.
# The POMO model bypasses estimating gene trees altogether.
# It assumes complete independence between sites of an alignment (no linkage).
# Therefore it can be used on a concatenate of all the alignments.


######################
# Preparing the data #
######################

# First, concatenating the alignments:
concatenate<-alns[1]
for (i in 2:n_genes) {
	concatenate <- concatenate + alns[i]
}

# The POMO models works in a state space that differs from the 4 DNA states.
# In addition to the 4 states, it includes polymorphic states.
# Specifically, it includes 2-state polymorphisms: AC AG AT CG CT GT.
# And it models real populations by a virtual population of size n individuals.
# The result is a model working in a state space of size 4 + 6 * n states.
# First, let's decide on the size of the virtual population.
# De Maio, Schlötterer and Kosiol (2013) consider 10 is already pretty good.

virtual_population_size <- 10

# Now, we need to convert the DNA alignment into an alignment in the correct POMO state space.

pomoConcatenate <- pomoStateConvert(concatenate, virtual_population_size, taxa)


#######################
# Preparing the model #
#######################

# Now we have the data for doing inference using the POMO model.
# To define a POMO model, one needs several components.

# First, one needs to define a transition matrix for DNA mutations.
# Here we are going to use a GTR matrix. 
# So we define the GTR matrix.

er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)

sf_prior <- v(1,1,1,1)
sf ~ dnDirichlet(sf_prior)

Q := gtr(er,sf) 

# Second, one can have different fitnesses for A, C, G, T. 
# Here, we are going to assume that all 4 bases have the same fitness.
base_fitnesses <- (1, 1, 1, 1)

# Now we have all the elements to build a POMO matrix to model the evolution of a population of alleles along a species tree.

P := pomo(Q, base_fitnesses, virtual_population_size)

# We also need to define root frequencies for all the states.
# To do that we need two variables:

# First, the proportion of polymorphic sites at the root
root_polymorphism_proportion ~ beta(alpha=1,beta=1)

# Second, one needs the root frequencies (we could use those of the GTR matrix but choose to have a non-stationary model):
root_base_frequencies ~ dnDirichlet(sf_prior)

# Now we have all the elements to construct root frequencies for all the states:
root_frequencies := pomoRF (root_base_frequencies, root_polymorphism_proportion, Q, virtual_population_size)


#########################################################
#########################################################
#########################################################
######################  THE END  ########################
#########################################################
#########################################################
#########################################################


