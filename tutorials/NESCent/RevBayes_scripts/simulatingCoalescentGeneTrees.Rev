######################################
######################################
########## Simulating Data ###########
######################################
######################################

# We choose to simulate data in a manner that resembles Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
# Differences include the number of species (10 in our case instead of 5 in their case), 
# and the model of sequence evolution (GTR+relaxed clock+ASRV in our case instead of JC69 in their case).

#For conveniency, we define a data folder in which we will save the output of our work.
dataFolder<-"/Users/boussau/sharedFolderLinux/revBayes/revbayes-code-git/examples/test/"
setwd(dataFolder)

# Let's simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species, 
# and along each gene tree one gene alignment 500 bases long.
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 500
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

######################
# Species-Tree model #
######################

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Birth-Death process priors, similar to Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
speciation ~ exponential(10.0)
extinction ~ exponential(10.0)
tree_height ~ dnUniform(0,1.0)
speciation.setValue(2)
extinction.setValue(0.3)
tree_height.setValue(0.08)

# Species tree from birth-death process
speciesTree ~ cBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)

# Making a backup for future reference:
trueSpeciesTree <- speciesTree

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

# Set the effective population size
Ne ~ gamma(shape=0.5,rate=0.5)
Ne.setValue(0.00004)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnConstPopMultispCoal(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
}

#Rescaling
speciesTree.rescale(10)
# Simulate gene trees
for (i in (n_genes+1):(2*n_genes)) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnConstPopMultispCoal(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
}

#Rescaling
speciesTree.rescale(10)
# Simulate gene trees
for (i in (2*n_genes+1):(3*n_genes)) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnConstPopMultispCoal(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
}



######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree, the gene trees, and the gene alignments
# Saving the species tree
write(speciesTree, filename=dataFolder+"speciesTree")

# Saving the gene trees
for (i in 1:(3*n_genes)) {
	write(geneTrees[i], filename=dataFolder+"geneTree_"+i)
}
