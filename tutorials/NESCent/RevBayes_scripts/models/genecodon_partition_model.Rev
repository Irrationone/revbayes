################################################################################
#
# RevBayes Exercise: Data partitioning strategies
# 
# This file: Specifies the full model parameters and moves for a 2-gene
#        partition model with codon specific substitution models
#
# authors: Tracy A. Heath, Michael Landis, and Sebastian Hoehna
#
################################################################################



#######################
# Reading in the Data #
#######################


# read in the character data
data[1] <- readCharacterData("data/conifer_atpB.nex")
data_rbcL <- readCharacterData("data/conifer_rbcL.nex")

# partition for 1st codon position
data[2] <- data_rbcL
data[2].setCodonPartition(1)

# partition for 2nd codon position
data[3] <- data_rbcL
data[3].setCodonPartition(2)

# partition for 3rd codon position
data[4] <- data_rbcL
data[4].setCodonPartition(3)

n_parts <- data.size()

# Get the size of each partition
for (i in 1:n_parts)
    n_sites[i] <- data[i].nchar(1)

# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
names <- data[1].names()
n_branches <- 2 * n_species - 3



#################################
#      Substitution Model       #
#   Loop over each partition    #
#################################
  
mi <- 0
for (i in 1:n_parts){

  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
  moves[mi++] <- mvSimplexElementScale(er[i], alpha=10.0, tune=true, weight=3.0)

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])
  moves[mi++] <- mvSimplexElementScale(sf[i], alpha=10.0, tune=true, weight=2.0) 

  Q[i] := gtr(er[i],sf[i])

  shape_prior[i] <- 0.05
  shape[i] ~ dnExponential( shape_prior[i] )
  norm_gamma_rates[i] := discretizeGamma( shape[i], shape[i], 4, false )
  moves[mi++] <- mvScale(shape[i], lambda=0.8, tune=true, weight=3.0)

}

# create a rate multiplier for each partitition that scales the tree
#part_rate_mult_prior <- rep(n_parts,1)
#part_rate_mult ~ dnDirichlet( part_rate_mult_prior )
#
#moves[mi++] <- mvSimplexElementScale(part_rate_mult, alpha=10, tune=true, weight=2.0)



##############
# Tree model #
##############


# Specify a uniform topology prior
topology ~ dnUniformTopology(n_species, names)

# moves on the tree
moves[mi++] <- mvNNI(topology, weight=10.0)


#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ dnExponential(10.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
  moves[mi++] <- mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
}

# create a deterministic variable for monitoring purposes
tree_length := sum(br_lens)

# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)





###################
# PhyloCTMC Model #
###################

for (i in 1:n_parts){
#  phyloSeq[i] ~ dnPhyloCTMC(tree=phylogeny, Q=Q[i], clockRate=part_rate_mult[i], siteRates=norm_gamma_rates[i], nSites=n_sites[i], type="DNA")
  phyloSeq[i] ~ dnPhyloCTMC(tree=phylogeny, Q=Q[i], siteRates=norm_gamma_rates[i], nSites=n_sites[i], type="DNA")
  phyloSeq[i].clamp(data[i])
}




#############
# THE Model #
#############

mymodel <- model(topology)

