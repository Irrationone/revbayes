#
# Tutorial -- the phylogenetic comparative method
# Correlation analysis of life-history traits in placental mammals
# Nicolas Lartillot -- July 2014
#

# read the data 
contData <- readCharacterData("data/plac40lhtlog.nex")

# output a brief summary
contData

# get some useful variables from the data
taxaCount <- contData.ntaxa()
names <- contData.names()
nTraits <- contData.nchar()[1]

"number of traits to analyze"
nTraits

#create a tree whose tips match the taxon names given by the dataset
tau ~ uniformTimeTree( originTime = 1.0, taxonNames = names)

# work under fixed topology
# set tau equal to externally given tree
treeArray <- readTrees("data/chronoplac40.tree")
fixedTree <- treeArray[1]
tau.setValue(fixedTree)

# covariance matrix sigma (of dimension nTraits)
# InverseWishart of parameter Sigma_0 = kappa * I_nTraits, and df=nTraits+2 degrees of freedom
# where kappa is itself a scale parameter

kappa ~ exponential(1.0)
df <- nTraits+2
sigma ~ invWishart(dim=nTraits, kappa=kappa, df=df)

# multivariate Brownian process along the tree
# parameterized by sigma
br ~ mvtBrownian(tau,sigma)

# moves on kappa
index <- 1
moves[index] <- mScale(kappa, lambda=2.0, tune=true, weight=3.0)
index <- index + 1

# conjugate Gibbs move on covariance matrix
moves[index] <- mvConjugateInverseWishartBrownian(sigma=sigma, process=br, kappa=kappa, df=df, weight=1) 
index <- index + 1

# moves on the Brownian process
moves[index] <- mvMultivariatePhyloProcessSliding(process=br,lambda=1,tune=true,weight=100) 
index <- index + 1
moves[index] <- mvMultivariatePhyloProcessTranslation(process=br,lambda=0.1,tune=true,weight=1) 
index <- index + 1

# condition Brownian model on quantitative trait data
# i.e. clamp the process at the tips of the tree, ot the values observed in extant taxa
# you need to do this trait by trait
for (i in 1:nTraits)	{
	# here we say that the ith entry of the Brownian process should map to the ith. quantitative trait
	br.clampAt(contData,i,i)
}

# get useful functions of the covariance matrix, to be monitored
# here we will monitor the correlation coefficient between trait 1 and trait 2 (sexual maturity and body mass)
cor12 := sigma.correlation(1,2)

# other possible examples
# covariance
# cov12 := sigma.covariance(1,2)
# variance per unit of time of body mass evolution
# var2 := sigma.covariance(2,2)
# partial correlation coefficient between variations in maturity and mass (controlled for the other trait, i.e. longevity)
# parcor12 := sigma.partialCorrelation(1,2)

# get useful outputs from the brownian process
# the mean and the variance across the tree, for each trait
for (i in 1:nTraits)	{
	# mean and stdev of each trait
	meanbr[i] := br.mean(i)
}

# create the model
mymodel <- model(kappa)

# create the monitors
# on screen, we will monitor only the correlation coefficient and the mean value of each trait
monitors[1] <- screenmonitor(printgen=10, cor12, meanbr)
# a file monitor just for the covariance matrix
monitors[2] <- filemonitor(filename="output/plactraits.cov",printgen=10, separator = "	", sigma)
# a file monitor for the evolution of traits along the tree (in newick format)
monitors[3] <- filemonitor(filename="output/plactraits.traits",printgen=10, separator = "	", br)
# a model monitor
monitors[4] <- modelmonitor(filename="output/plactraits.log",printgen=10, separator = "	")
 
mymcmc <- mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=100,tuningInterval=100)

mymcmc.run(100000)

# some post analysis here

