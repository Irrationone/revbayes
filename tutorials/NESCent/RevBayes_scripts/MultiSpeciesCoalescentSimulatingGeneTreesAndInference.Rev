######################################
######################################
########## Simulating Data ###########
######################################
######################################

# We choose to simulate data in a manner that resembles Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
# Differences include the number of species (10 in our case instead of 5 in their case), 
# and the model of sequence evolution (GTR+relaxed clock+ASRV in our case instead of JC69 in their case).

#For conveniency, we define a data folder in which we will save the output of our work.
dataFolder<-"/Users/boussau/sharedFolderLinux/revBayes/revbayes-code-git/examples/test/"
setwd(dataFolder)

# Let's simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species, 
# and along each gene tree one gene alignment 500 bases long.
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 500
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

######################
# Species-Tree model #
######################

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Birth-Death process priors, similar to Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
speciation ~ dnExp(10.0)
extinction ~ dnExp(10.0)
tree_height ~ unif(0,10000000)
speciation.setValue(2)
extinction.setValue(0.3)
tree_height.setValue(1)

# Species tree from birth-death process
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)

# Making a backup for future reference:
trueSpeciesTree <- speciesTree

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

# Set the effective population size
Ne ~ dnGamma(shape=0.5,rate=0.5)
Ne.setValue(0.00004)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnCoalMultiSpeciesConst(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
	#We rescale the gene tree with a mutation rate of 10-8 per generation
   geneTrees[i].rescale(0.0000001)
}

# Making a backup for future reference:
trueNe <- Ne

######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree, the gene trees, and the gene alignments
# Saving the species tree
write(speciesTree, filename=dataFolder+"speciesTree")

# Saving the gene trees
for (i in 1:n_genes) {
	write(geneTrees[i], filename=dataFolder+"geneTree_"+i)
}


######################################
######################################
########## Doing inference ###########
######################################
######################################

# Clamping the gene trees
for (i in 1:(n_genes)) {
	geneTrees[i].clamp(geneTrees[i])
}

################################
# Changing the starting values #
################################

# We want to start from random values, not the values used in the simulation.

# Redrawing the parameters of the birth-death process:
#speciation.redraw()
#extinction.redraw()
#tree_height.redraw()

# Redrawing the species tree:
#speciesTree.redraw()

####################
# Setting up moves #
####################

# We need to set up moves for the birth-death parameters, the species tree topology, the gene tree topologies, 
# the parameter Ne, the parameters of the substitution models, the rates on the gene trees.

moveIndex <- 0

# moves for the birth-death parameters
moves[moveIndex++] <- mvScale(speciation,1,true,1.0) # In the revLanguage, table indices start at 1
moves[moveIndex++] <- mvScale(extinction,1,true,1.0)
moves[moveIndex++] <- mvSlide(tree_height,delta=1.0,true,2.0)

# move on Ne, the effective population size
moves[moveIndex++] <- mvScale(Ne,1,true,1.0)

# moves on the tree topology and node ages
moves[moveIndex++] <- mvNNI(speciesTree, 1.0)
moves[moveIndex++] <- mvFNPR(speciesTree, 1.0)
moves[moveIndex++] <- mvSubtreeScale(speciesTree, 5.0)
moves[moveIndex++] <- mvTreeScale(speciesTree, delta=1.0, tune=true, weight=3.0)
moves[moveIndex++] <- mvNodeTimeSlideUniform(speciesTree, 10.0)
moves[moveIndex++] <- mvRootTimeSlide(speciesTree, 1.0, true, 3.0)


############
# Monitors #
############

# We define a few monitors to keep track of how things go.

mntrIndex <- 0

# One monitor to backup the parameters, in case we want to stop and restart the analysis:
monitors[mntrIndex++] <- mnModel(filename=dataFolder+"GTST_NoSequences_clock.log",printgen=10, separator = "	")

# One monitor to print the species trees sampled in the course of the MCMC:
monitors[mntrIndex++] <- mnFile(filename=dataFolder+"GTST_NoSequences_clock_species.trees",printgen=10, separator = "	", speciesTree)

# We also want to monitor how far we are from the true values, which we have because we rely on simulations.
# First, we can compute the distance between the reconstructed and the true species tree:
distSpeciesTree := symDiff (trueSpeciesTree, speciesTree)
distNe:= Ne - trueNe

# We can use one monitor that will output on the screen one parameter, Ne, distNe, distSpeciesTree:
monitors[mntrIndex++] <- mnScreen(printgen=10, distSpeciesTree, Ne, distNe)
	

#############
# THE Model #
#############

# We can use any node of our model as a handle, here we choose to use the species tree.
 
mymodel <- model(speciesTree)



########
# MCMC #
########

# We create the MCMC object
mymcmc <- mcmc(mymodel, monitors, moves)


# We launch the analysis, and specify the burnin (iterations that will not be considered for analysis), 
# the number of iterations that will be considered for analysis, 
# and the tuning interval for tuning parameters of moves on scalar variables.
# Note that one mcmc iteration includes 33 proposal (incl. accept/reject) which is the number of moves times their weight.
# If you choose more or different proposals, or different weights for the proposals, then the number of proposals changes per iteration.
# mymcmc.burnin(generations=200,tuningInterval=100)
mymcmc.run(generations=40000)


