################################################################################
#
# RevBayes Example: Simulation and species tree inference using the concatenation approach.
#
# 
# This file: Specifies the full Multispecies coalescent model, simulates data, 
# and then performs inference using concatenation.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################


######################################
######################################
########## Simulating Data ###########
######################################
######################################

# We choose to simulate data in a manner that resembles Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
# Differences include the number of species (10 in our case instead of 5 in their case), 
# and the model of sequence evolution (GTR+relaxed clock+ASRV in our case instead of JC69 in their case).

#For conveniency, we define a data folder in which we will save the output of our work.
dataFolder<-"/Users/boussau/sharedFolderLinux/revBayes/revbayes-code-git/examples/test/"
setwd(dataFolder)

# Let's simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species, 
# and along each gene tree one gene alignment 500 bases long.
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 500
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree

######################
# Species-Tree model #
######################

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Birth-Death process priors, similar to Leaché and Rannala, Syst. Biol. 2011 60:2, pp126-137.
speciation ~ exponential(10.0)
extinction ~ exponential(10.0)
tree_height ~ unif(0,1.0)
speciation.setValue(2)
extinction.setValue(0.3)
tree_height.setValue(0.008)

# Species tree from birth-death process
speciesTree ~ cBDP(lambda=speciation, mu=extinction, origin=tree_height, nTaxa=n_species, names=s_names)

# Making a backup for future reference:
trueSpeciesTree <- speciesTree

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

# Set the effective population size
Ne ~ gamma(shape=0.5,rate=0.5)
Ne.setValue(0.004)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnConstPopMultispCoal(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
}

# For fun, let's look at the symmetric differences between the simulated gene tree topologies:
ndiff <- 1
for (i in 1:(n_genes-1)) {
	for (j in (i+1):n_genes) {
		diff[ndiff]<-symDiff (geneTrees[i], geneTrees[j]) 
		ndiff <- ndiff+1
	}
}

# The distances show that the gene trees are very dissimilar, because the maximum symmetric difference is 
# 2*(number of internal branches), which is equal to:
maxDiff <- 2 * (n_species*n_alleles - 2)

# Making a backup for future reference:
trueGeneTrees <- geneTrees
trueNe <- Ne

#######################
# Substitution Models #
#######################

# Here we assume that all genes share the same basic substitution model, a GTR.
# However, the parameters of the models change from one gene family to the next.
for (i in 1:n_genes) {
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])

  Q[i] := gtr(er[i],sf[i]) 

}

# Making a backup for future reference:
for (i in 1:n_genes) {
	trueEr[i] <- er[i]
	trueSf[i] <- sf[i]
}


###############
# Clock Model #
###############

# Here we assume a simple strict clock model. 
# However, each gene family can have its own rate of evolution.
# Those rate parameters are drawn independently from an exponential distribution.
# This makes it possible to have large differences in rates of evolution between two different gene families. 

for (i in 1:n_genes) {
  familyRates[i] ~ exponential(1.0)
}

# Making a backup for future reference:
for (i in 1:n_genes) {
  trueFamilyRates[i] <- familyRates[i] 
}


#############################
# Among Site Rate Variation #
#############################

# As for the substitution model and the clock model above, 
# we assume that each gene family has its own set of parameters. 
# Rate variation across sites is handled by a discretized Gamma distribution.

for (i in 1:n_genes) {

  shape_prior[i] <- 0.05 
  shape[i] ~ dnExponential( shape_prior[i] )
  norm_gamma_rates[i] := discretizeGamma( shape[i], shape[i], 4, false )

}


###################
# PhyloCTMC Model #
###################

# Here we simulate gene family alignments.
# To link all the parts of the model together we use the phyloCTMC object.

for (i in 1:n_genes) {
  alns[i] ~ phyloCTMC(tree=geneTrees[i], Q=Q[i],  branchRates=familyRates[i], siteRates=norm_gamma_rates[i], nSites=n_sites, type="DNA")
}


######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree, the gene trees, and the gene alignments
# Saving the species tree
write(speciesTree, filename="speciesTree")

# Saving the gene trees
for (i in 1:n_genes) {
	write(geneTrees[i], filename="geneTree_"+i)
}

# Saving the gene alignments
for (i in 1:n_genes) {
	writeFasta(alns[i], filename="alignment_"+i+".fasta")
}

#####################################################
#####################################################
## Species tree reconstruction using concatenation ##
#####################################################
#####################################################

# First, concatenating the alignments:
concatenate<-alns[1]
for (i in 2:n_genes) {
	concatenate <- concatenate + alns[i]
}
concatenate_n_sites <- concatenate.nchar()[1]

# Second, one needs to define a transition matrix for DNA mutations.
# Here we are going to use a GTR matrix. 
# So we define the GTR matrix.

er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)

sf_prior <- v(1,1,1,1)
sf ~ dnDirichlet(sf_prior)

Q := gtr(er,sf) 

# Adding an across site rate variation model, the usual Gamma distribution discretized in 4 categories
shape_prior <- 0.05 
shape ~ dnExponential( shape_prior )
norm_gamma_rates := discretizeGamma( shape, shape, 4, false )

# We do not assume variation among branches in rates
branch_rates <- 1.0

# We do not assume a proportion of invariant
p_inv ~ beta(alpha=1,beta=1)
p_inv.setValue(0.000001)


# To link all the parts of the model together we use the phyloCTMC object.

aln ~ phyloCTMC(tree=speciesTree, Q=Q, branchRates=branch_rates, siteRates=norm_gamma_rates, pInv=p_inv, nSites=concatenate_n_sites, type="DNA")

aln.clamp(concatenate)

####################
# Setting up moves #
####################

# We need to set up moves for the birth-death parameters, the species tree topology, the gene tree topologies, 
# the parameter Ne, the parameters of the substitution models, the rates on the gene trees.

moveIndex <- 0

# moves for the birth-death parameters
moves[moveIndex++] <- mvScale(speciation,1,true,1.0) # In the revLanguage, table indices start at 1
moves[moveIndex++] <- mvScale(extinction,1,true,1.0)
moves[moveIndex++] <- mvSlide(tree_height,delta=1.0,true,2.0)


# moves on the tree topology and node ages
moves[moveIndex++] <- mvNNI(speciesTree, 1.0)
moves[moveIndex++] <- mvFNPR(speciesTree, 1.0)
moves[moveIndex++] <- mvSubtreeScale(speciesTree, 5.0)
moves[moveIndex++] <- mvTreeScale(speciesTree, delta=1.0, tune=true, weight=3.0)
moves[moveIndex++] <- mvNodeTimeSlideUniform(speciesTree, 10.0)
moves[moveIndex++] <- mvRootTimeSlide(speciesTree, 1.0, true, 3.0)

# moves on the parameters of the substitution model
moves[moveIndex++] <- mvSimplexElementScale(er, alpha=10, tune=true, weight=3) 
moves[moveIndex++] <- mvSimplexElementScale(sf, alpha=10, tune=true, weight=2) 

# moves on the parameters of the root frequencies
moves[moveIndex++] <- mvSimplexElementScale(root_base_frequencies, alpha=10, tune=true, weight=3) 
#moves[moveIndex++] <- mvScale(root_polymorphism_proportion, lambda=10, tune=true, weight=2) 
moves[moveIndex++] <- mvSlide(root_polymorphism_proportion, delta=10, tune=true, weight=2) 

# moves on the across-sites rate variation parameter:
moves[moveIndex++] <- mvScale(shape, lambda=0.8, tune=true, weight=3.0)


############
# Monitors #
############

# We define a few monitors to keep track of how things go.

mntrIndex <- 0

# One monitor to backup the parameters, in case we want to stop and restart the analysis:
monitors[mntrIndex++] <- modelmonitor(filename="concatenation_clock.log",printgen=10, separator = "	")

# One monitor to print the species trees sampled in the course of the MCMC:
monitors[mntrIndex++] <- filemonitor(filename="concatenation_clock_species.trees",printgen=10, separator = "	", speciesTree)

# We also want to monitor how far we are from the true values, which we have because we rely on simulations.
# First, we can compute the distance between the reconstructed and the true species tree:
distSpeciesTree := symDiff (trueSpeciesTree, speciesTree)


# We can use one monitor that will output on the screen one parameter, Ne, distNe, distSpeciesTree:
monitors[mntrIndex++] <- screenmonitor(printgen=10, distSpeciesTree)
	

#############
# THE Model #
#############

# We define our model.
# First we need to get rid of several variables that are not part of the concatenation model.
clear(alns)
clear(geneTrees)
clear(Ne)
clear(familyRates)
clear(trueEr)
clear(trueFamilyRates)
clear(trueGeneTrees)
clear(trueNe)
clear(trueSf)

# We can use any node of our model as a handle, here we choose to use the species tree.
 
mymodel <- model(speciesTree)



########
# MCMC #
########

# We create the MCMC object
mymcmc <- mcmc(mymodel, monitors, moves)


# We launch the analysis, and specify the burnin (iterations that will not be considered for analysis), 
# the number of iterations that will be considered for analysis, 
# and the tuning interval for tuning parameters of moves on scalar variables.
# Note that one mcmc iteration includes 33 proposal (incl. accept/reject) which is the number of moves times their weight.
# If you choose more or different proposals, or different weights for the proposals, then the number of proposals changes per iteration.
# mymcmc.burnin(generations=200,tuningInterval=100)
mymcmc.run(generations=40000)








