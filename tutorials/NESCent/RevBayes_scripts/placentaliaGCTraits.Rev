#
# Tutorial -- the phylogenetic comparative method
# Correlation analysis: rates, GC content, dates and life-history traits in placental mammals
# Nicolas Lartillot -- July 2014
#

######### 
# data
#########

# read the quantitative trait data 
contData <- readCharacterData("data/plac40lhtlog.nex")

# get some useful variables from the data
contTaxaCount <- contData.ntaxa()
nTraits <- contData.nchar()[1]

"number of traits to analyze"
nTraits

# read the sequence data
# the readCharacter function returns a vector of matrices. We just take the first one
seqData <- readCharacterData("data/plac40_4fold.nex")

# get some useful variables from the data
taxaCount <- seqData.ntaxa()
names <- seqData.names()
nSites <- seqData.nchar()[1]
"number of sites of the alignment"
nSites

######### 
# tree  
#########

# create a tree whose tips match the taxon names given by the dataset
tau ~ uniformTimeTree( originTime = 1.0, taxonNames = names)

# work under fixed topology
# set tau equal to externally given tree
treeArray <- readTrees("data/chronoplac40.tree")
fixedTree <- treeArray[1]
tau.setValue(fixedTree)

index <- 1

# moves on the tree: only relative dates
moves[index] <- mSubtreeScale(tau, weight=5.0)
index <- index + 1
moves[index] <- mNodeTimeSlideUniform(tau, weight=10.0)
index <- index + 1

# if we wanted to, we could also move the tree topology
# and integrate over the posterior induced by the sequence data
# but mixing is currently a bit challenging 
# moves[index] <- mNNI(tau, weight=5.0)
# index <- index + 1
# moves[index] <- mFNPR(tau, weight=5.0)
# index <- index + 1

######### 
# traits
#########

# covariance matrix of dimension nTraits + 2
# first entry will be log of substitution rate
# then all other entries will stand for the life-history traits

# covariance matrix is inverse Wishart of parameters kappa * Identity and df = nTraits+3 degrees of freedom
# where kappa is itself a scaling factor

kappa ~ exponential(1.0)
df <- nTraits+4
covdim <- nTraits+2

sigma ~ invWishart(dim=covdim, kappa=kappa, df=df)

# moves on kappa
moves[index] <- mScale(kappa, lambda=2.0, tune=true, weight=3.0)
index <- index + 1

# multivariate Brownian process along the tree
br ~ mvtBrownian(tau,sigma=sigma)

# conjugate Gibbs move on covariance matrix
moves[index] <- mvConjugateInverseWishartBrownian(sigma=sigma, process=br, kappa=kappa, df=df, weight=1) 
index <- index + 1

# moves on the Brownian process
moves[index] <- mvMultivariatePhyloProcessSliding(process=br,lambda=1,tune=true,weight=100) 
index <- index + 1
moves[index] <- mvMultivariatePhyloProcessTranslation(process=br,lambda=0.1,tune=true,weight=1) 
index <- index + 1

# first and second components of the Brownian model map to substitution rate and gc content (see below)
# other copmonents of the Brownian process correspond to life-history traits
# so we clamp the process at the tips of the tree, at the values observed in extant taxa
# you need to do this trait by trait
for (i in 1:nTraits)	{

	# here we say that the (i+2)th entry of the Brownian process should map to the ith. quantitative trait
	br.clampAt(contData,i+2,i)
}

# get useful functions of the covariance matrix
# here we want,say, the correlation between GC and body mass 
parcor14 := sigma.partialCorrelation(1,4)

# get useful outputs from the brownian process

for (i in 1:covdim)	{

	# mean and stdev of the log rate (i=1) and then each trait
	meanbr[i] := br.mean(i)
	stdevbr[i] := br.stdev(i)
}


######### 
# substitution process
#########

# equilibrium frequencies 
bf <- v(1,1,1,1)
pi ~ dirichlet(bf)

# moves on pi
moves[index] <- mSimplexElementScale(pi, alpha=10.0, tune=true, weight=1.0)
index <- index + 1

# first component of the Brownian model gives the *log* of the substitution rate
# so we take the exponential and average over branches
# traitindex = 1: because we want to take the exponential of the first component of the multivariate Brownian process
branchrates := expbranchtree(tree=tau,process=br,traitindex=1)

# second component of the Brownian model gives the *logit* of the equilibrium GC content
# thus GC = exp(X_2(t)) / (1 + exp(X_2(t)) = tanh(X_2(t)), where X is the Brownian motion
# tanh is the hyperbolic tangent: tanh(x) = exp(x) / (1 + exp(x))
rootval <- 0
branchGC := tanhBranchTree(tree=tau,process=br,offset=rootval,traitindex=2)

# the transition / transversion ratio
tstv ~ exponential(1)

# root gc
rootgc ~ beta(alpha=1,beta=1)

# each branch has its own substitution matrix, which is a T92 matrix
# defined by a transition/transversion ratio and an equilibrium GC
# so, we use branchGC, which gives a GC for each branch
# we combine it with the global ts/tv ratio
branchMatrices := t92GCBranchTree(tree=tau,gctree=branchGC,rootgc=rootgc,kappa=tstv)

# create the sequence evolution model
seq ~ substModel(tree=tau, Q=branchMatrices, rootFrequencies=pi, branchRates=branchrates, nSites=nSites, type="DNA")

# condition on sequence alignment
seq.clamp(seqData)

# create model
mymodel <- model(kappa)

# screen monitor: sigma, meanbr and stdevbr, for checking convergence 
monitors[1] <- screenmonitor(printgen=10, parcor14, sigma, meanbr)

# monitoring the covariance matrix
monitors[2] <- filemonitor(filename="output/placgc.cov",printgen=10, separator = "	", sigma)

# monitoring the brownian evolutionary history
monitors[3] <- filemonitor(filename="output/placgc.traits",printgen=10, separator = "	", br)

monitors[4] <- modelmonitor(filename="output/placgc.log",printgen=10, separator = "	")
 
mymcmc <- mcmc(mymodel, monitors, moves)

mymcmc.burnin(generations=100,tuningInterval=100)

mymcmc.run(100000)


