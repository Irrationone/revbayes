################################################################################
#
# RevBayes Example: Simulation using the concatenation approach.
#
# This file: Specifies the full Multispecies coalescent model, simulates gene trees, 
# and then computes metrics on gene trees.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################


# A folder where to save the simulated data
dataFolder <- "data/"

# Let’s simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species (feel free to change
# these values).
n_species <- 10
n_genes <- 10
n_alleles <- 5

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

######################
# Species-Tree model #
######################


# We simulate a species tree topology according to a birth-death process with arbitrary parameter values (similar to Leaché and Rannala (2011)):
speciation ~ dnExp(10.0)
extinction ~ dnExp(10.0)
tree_height ~ dnUniform(0,1.0)
speciation.setValue(2)
extinction.setValue(0.3)
tree_height.setValue(0.8)
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, origin=tree_height, nTaxa=n_species, names=s_names)

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Then we can use the multispecies coalescent model to generate gene trees. These can be examined
# using Figtree or NJplot or any other tree viewer, but we can also directly compute symmetric
# differences between these from RevBayes (see below). First, we simulate a set of gene trees, using a single
# effective population size for all branches, and after having constructed a map between species
# names and gene names:

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}


# Set the effective population size
Ne ~ dnGamma(shape=0.1,rate=0.1)
Ne.setValue(0.004)

# Simulate gene trees
for (i in 1:n_genes) {
	# The gene tree from the multispecies coalescent process
	# Note that if Ne had been a vector of effective population sizes
	# instead of a single value,
	# allowing 1 parameter per branch of the species tree, the same
	# line would work.
	geneTrees[i] ~ dnCoalMultiSpeciesConst(speciesTree=speciesTree, Ne=
Ne, taxa=taxa)
}

######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree and the gene trees
write(speciesTree, filename=dataFolder+"speciesTree")

# Saving the gene trees
for (i in 1:(n_genes)) {
	write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
}


######################################
######################################
##### Analyzing the gene trees #######
######################################
######################################

# We can compute symmetric differences between all these gene trees. The symmetric difference
# between two trees is the total number of partitions found in one tree but not in the other one.

# In our case, the maximal difference is as follows:
maxDiff <- 2 * (n_species*n_alleles - 2)

# That will give us a reference for comparing with the values we get on our gene trees. We can
# build a function for computing all pairwise symmetric differences between our gene trees, and
# getting the mean. 
# Caveat: in the current state of the Rev language, we have to use variable names that have never 
# been used before in the workspace (hence the use of "k" and "l" for loop indices instead of "i" 
# and "j" that have been used before. Alternatively we could have done a "clear(i)" and a "clear(j)" 
# if we really wanted to use these variable names). 

function RealPos symDiffVector ( TimeTree[] vec ) {
	ndiff <- 1
	for (k in 1:(vec.size()-1)) {
		for (l in (k+1):vec.size()) {
			diff[ndiff]<-symDiff (vec[k], vec[l])
			ndiff <- ndiff+1
		}
	}
	return (mean(diff))
}

# We can then use this function on our gene trees:
symDiffVector(geneTrees)

# Now to get a sense of how population size and branch lengths alter the gene tree distribution, we
# can relaunch the multispecies coalescent simulation (step 4) and look at the resulting gene trees
# after having rescaled the species tree or after having changed the effective population size.
# To do these little changes:
# Changing Ne:
Ne.setValue(0.08)

#Rescaling the species tree:
speciesTree.rescale(0.1)

# Using the functions above, it is possible to look at the species tree in coalescent time units (which is
# very convenient). How would you do that?
# Do these observations seem coherent with what you know about the multispecies coalescent?
