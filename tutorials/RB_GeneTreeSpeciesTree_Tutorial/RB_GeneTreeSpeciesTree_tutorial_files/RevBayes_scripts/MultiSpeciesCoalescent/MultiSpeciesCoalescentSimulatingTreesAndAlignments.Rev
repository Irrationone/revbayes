################################################################################
#
# RevBayes Example: Simulation of gene and species trees using the Multispecies coalescent.
#
# 							SCRIPT 1
#
#
# This file: Specifies the full Multispecies coalescent model, and simulates data.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################


######################################
######################################
########## Simulating Data ###########
######################################
######################################


# Let's simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species, 
# and along each gene tree one gene alignment 500 bases long.
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 100
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree
dataFolder <- "data/"


######################
# Species-Tree model #
######################

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Birth-Death process priors.
speciation ~ dnExp(10.0)
extinction ~ dnExp(10.0)
tree_height ~ unif(0.0,100.0)
speciation.setValue(2)
extinction.setValue(0.3)

# Species tree from birth-death process
tree_height.setValue(1)
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)

# Making a backup for future reference:
trueSpeciesTree <- speciesTree

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

# Set the effective population size
Ne ~ dnGamma(shape=1,rate=1)
Ne.setValue(0.01)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnCoalMultiSpeciesConst(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
}

# For fun, let's look at the symmetric differences between the simulated gene tree topologies:
ndiff <- 1
for (i in 1:(n_genes-1)) {
	for (j in (i+1):n_genes) {
		diff[ndiff]<-symDiff (geneTrees[i], geneTrees[j]) 
		ndiff <- ndiff+1
	}
}

# The distances show that the gene trees are very dissimilar, because the maximum symmetric difference is 
# 2*(number of internal branches), which is equal to:
maxDiff <- 2 * (n_species*n_alleles - 2)

# Making a backup for future reference:
trueGeneTrees <- geneTrees
trueNe <- Ne



######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree, the gene trees, and the gene alignments
# Saving the species tree
write(trueSpeciesTree, filename=dataFolder+"speciesTree.tree")

# Saving the gene trees
for (i in 1:n_genes) {
	write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
}







