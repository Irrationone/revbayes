################################################################################
#
# RevBayes Example: Simulation of gene and species trees using the Multispecies coalescent.
#
# 							SCRIPT 1
#
#
# This file: Specifies the full Multispecies coalescent model, and simulates data.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################


######################################
######################################
########## Simulating Data ###########
######################################
######################################


# Let's simulate a species tree with 10 taxa, 10 gene trees, 5 alleles per species, 
# and along each gene tree one gene alignment 500 bases long.
n_species <- 10
n_genes <- 10
n_alleles <- 5
n_sites <- 100
n_branches <- 2 * n_species - 3 # number of branches in a rooted tree
dataFolder <- "data/"


######################
# Species-Tree model #
######################

# Species names
for (i in 1:n_species) {
	s_names[i] <- "Species_"+i
}

# Birth-Death process priors, similar to LeachÃ© and Rannala, Syst. Biol. 2011 60:2, pp126-137.
speciation ~ exponential(10.0)
extinction ~ exponential(10.0)
tree_height ~ unif(0.0,10000000.0)
speciation.setValue(2)
extinction.setValue(0.3)

# Species tree from birth-death process
#We assume 1,000,000 generations
tree_height.setValue(1)
speciesTree ~ dnBDP(lambda=speciation, mu=extinction, rootAge=tree_height, nTaxa=n_species, names=s_names)
speciesTree.rescale(1000000)

# Making a backup for future reference:
trueSpeciesTree <- speciesTree

###########################################
# Gene-Tree multispecies coalescent model #
###########################################

# Build the mapping between sequence names and species names.
for (i in 1:n_species) {
	for (j in 1:n_alleles) {
		taxa[(i-1)*n_alleles+j] <- taxon(taxonName=s_names[i]+"_"+j, speciesName=s_names[i])
	}
}

# Set the effective population size
Ne ~ dnGamma(shape=1,rate=1)
Ne.setValue(10000)

# Simulate gene trees
for (i in 1:n_genes) {
   # The gene tree from the multispecies coalescent process
   # Note that if Ne had been a vector of effective population sizes, 
   # allowing 1 parameter per branch of the species tree, the same line would work.
   geneTrees[i] ~ dnCoalMultiSpeciesConst(speciesTree=speciesTree, Ne=Ne, taxa=taxa)
   	#We rescale the gene tree with a mutation rate of 10-8 per generation
   geneTrees[i].rescale(0.0000001)
}

# For fun, let's look at the symmetric differences between the simulated gene tree topologies:
ndiff <- 1
for (i in 1:(n_genes-1)) {
	for (j in (i+1):n_genes) {
		diff[ndiff]<-symDiff (geneTrees[i], geneTrees[j]) 
		ndiff <- ndiff+1
	}
}

# The distances show that the gene trees are very dissimilar, because the maximum symmetric difference is 
# 2*(number of internal branches), which is equal to:
maxDiff <- 2 * (n_species*n_alleles - 2)

# Making a backup for future reference:
trueGeneTrees <- geneTrees
trueNe <- Ne

#######################
# Substitution Models #
#######################

# Here we assume that all genes share the same basic substitution model, a GTR.
# However, the parameters of the models change from one gene family to the next.
for (i in 1:n_genes) {
  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])

  Q[i] := fnGTR(er[i],sf[i]) 

}

# Making a backup for future reference:
for (i in 1:n_genes) {
	trueEr[i] <- er[i]
	trueSf[i] <- sf[i]
}


###############
# Clock Model #
###############

# Here we assume a simple strict clock model. 
# However, each gene family can have its own rate of evolution.
# Those rate parameters are drawn independently from an exponential distribution.
# This makes it possible to have large differences in rates of evolution between two different gene families. 

for (i in 1:n_genes) {
  familyRates[i] ~ exponential(1.0)
}

# Making a backup for future reference:
for (i in 1:n_genes) {
  trueFamilyRates[i] <- familyRates[i] 
}


#############################
# Among Site Rate Variation #
#############################

# As for the substitution model and the clock model above, 
# we assume that each gene family has its own set of parameters. 
# Rate variation across sites is handled by a discretized Gamma distribution.

for (i in 1:n_genes) {

  shape_prior[i] <- 0.05 
  shape[i] ~ dnExponential( shape_prior[i] )
  norm_gamma_rates[i] := discretizeGamma( shape[i], shape[i], 4, false )

}


###################
# PhyloCTMC Model #
###################

# Here we simulate gene family alignments.
# To link all the parts of the model together we use the phyloCTMC object.

for (i in 1:n_genes) {
  alns[i] ~ dnPhyloCTMC(tree=geneTrees[i], Q=Q[i],  branchRates=familyRates[i], siteRates=norm_gamma_rates[i], nSites=n_sites, type="DNA")
}


####################################
# Concatenating the alignments
####################################

# First, :
concatenate<-alns[1]
for (i in 2:n_genes) {
	concatenate <- concatenate + alns[i]
}

#Take a look at the current concatenate:
write(concatenate)



######################################
######################################
########### Writing Data #############
######################################
######################################

# We need to save the species tree, the gene trees, and the gene alignments
# Saving the species tree
write(trueSpeciesTree, filename=dataFolder+"speciesTree.tree")

# Saving the gene trees
for (i in 1:n_genes) {
	write(geneTrees[i], filename=dataFolder+"geneTree_"+i+".tree")
}

# Saving the gene alignments
for (i in 1:n_genes) {
	writeFasta(alns[i], filename=dataFolder+"alignment_"+i+".fasta")
}

# Saving the concatenate
# Writing the concatenate
writeFasta(concatenate, filename=dataFolder+"concatenate.fasta")









