################################################################################
#
# RevBayes Example: Simulation and species tree inference using the POMO model.
#
# 							SCRIPT 3
#
# This file: Specifies the full Multispecies coalescent model, simulates data, 
# and then performs inference using the POMO model.
# The species tree is distributed according to a birth-death process.
# Gene trees are distributed according to the Multispecies coalescent model running along this species tree.
# We assume a single effective population size for the entire tree.
# Gene sequences are distributed according to a Continuous Time Markov Chain (GTR) 
# with a relaxed clock (independent rates), and rate variation across sites.
#
# authors: Bastien Boussau and Sebastian Hoehna
#
################################################################################

# If we want to set the seed, we can use the following command:
seed(43667, 21502)
printSeed()

source("MultiSpeciesCoalescentSimulatingTreesAndAlignments.Rev")

clear()

dataFolder <- "data/"

source("MultiSpeciesCoalescentPomoModel.Rev")

############################################
############################################
## Species tree reconstruction using POMO ##
############################################
############################################


################################
# Changing the starting values #
################################

# We want to start from random values, not the values used in the simulation.

# Redrawing the parameters of the birth-death process:
#speciation.redraw()
#extinction.redraw()
#tree_height.redraw()

# Redrawing the species tree:
#speciesTree.redraw()



####################
# Setting up moves #
####################

# We need to set up moves for the birth-death parameters, the species tree topology, the gene tree topologies, 
# the parameter Ne, the parameters of the substitution models, the rates on the gene trees.

moveIndex <- 0

# moves for the birth-death parameters
moves[moveIndex++] <- mvScale(speciation,lambda=1,tune=true,weight=1.0) # In the revLanguage, table indices start at 1
moves[moveIndex++] <- mvScale(extinction,1,true,1.0)
moves[moveIndex++] <- mvSlide(tree_height,delta=1.0,true,2.0)


# moves on the tree topology and node ages
moves[moveIndex++] <- mvNNI(speciesTree, 2.0)
moves[moveIndex++] <- mvNarrow(speciesTree, 5.0)
moves[moveIndex++] <- mvFNPR(speciesTree, 2.0)
moves[moveIndex++] <- mvSubtreeScale(speciesTree, 5.0)
moves[moveIndex++] <- mvTreeScale(speciesTree, tree_height, delta=1.0, tune=true, weight=3.0)
moves[moveIndex++] <- mvNodeTimeSlideUniform(speciesTree, 10.0)

# moves on the parameters of the substitution model
moves[moveIndex++] <- mvSimplexElementScale(er, alpha=10, tune=true, weight=3) 
moves[moveIndex++] <- mvSimplexElementScale(sf, alpha=10, tune=true, weight=2) 

# moves on the parameters of the root frequencies
moves[moveIndex++] <- mvSimplexElementScale(root_base_frequencies, alpha=10, tune=true, weight=3) 
moves[moveIndex++] <- mvScale(root_polymorphism_proportion, lambda=10, tune=true, weight=2) 
moves[moveIndex++] <- mvSlide(root_polymorphism_proportion, delta=10, tune=true, weight=2) 

# moves on the across-sites rate variation parameter:
moves[moveIndex++] <- mvScale(shape, lambda=0.8, tune=true, weight=3.0)

############
# Monitors #
############

# We define a few monitors to keep track of how things go.

mntrIndex <- 0

# One monitor to backup the parameters, in case we want to stop and restart the analysis:
monitors[mntrIndex++] <- mnModel(filename=dataFolder+"pomo_clock.log",printgen=10, separator = "	")

# One monitor to print the species trees sampled in the course of the MCMC:
monitors[mntrIndex++] <- mnFile(filename=dataFolder+"pomo_clock_species.trees",printgen=10, separator = "	", speciesTree)

# We also want to monitor how far we are from the true values, which we have because we rely on simulations.
# First, we can compute the distance between the reconstructed and the true species tree:
distSpeciesTree := symDiff (trueSpeciesTree, speciesTree)

# Distance between species tree parameters:
distDiv := trueSpeciation/trueExtinction - speciation/extinction

# Distance between species tree ages:
distAge := trueRootAge - tree_height

# We can use one monitor that will output on the screen one parameter, distSpeciesTree:
monitors[mntrIndex++] <- mnScreen(printgen=10, distSpeciesTree, distDiv, distAge )
	

#############
# THE Model #
#############

# We can use any node of our model as a handle, here we choose to use the species tree.
 
mymodel <- model(speciesTree)



########
# MCMC #
########

# We create the MCMC object
mymcmc <- mcmc(mymodel, monitors, moves, moveschedule="single")


# We launch the analysis, and specify the burnin (iterations that will not be considered for analysis), 
# the number of iterations that will be considered for analysis, 
# and the tuning interval for tuning parameters of moves on scalar variables.
# Note that one mcmc iteration includes 33 proposal (incl. accept/reject) which is the number of moves times their weight.
# If you choose more or different proposals, or different weights for the proposals, then the number of proposals changes per iteration.
#mymcmc.burnin(generations=200,tuningInterval=100)
mymcmc.run(generations=4000)






