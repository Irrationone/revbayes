################################################################################
#
# RevBayes Exercise: Calculating Marginal Liklihoods and Bayes Factors to test
#  data partitioning strategies
# 
# This file: Specifies the full model parameters and moves for a 2-gene
#        partition model
#
# authors: Tracy A. Heath, Michael Landis, and Sebastian Hoehna
#
################################################################################


# read in the character data
data[1] <- readCharacterData("data/conifer_atpB.nex")[1]
data_rbcL <- readCharacterData("data/conifer_rbcL.nex")[1]

# partition for 1st codon position
data[2] <- data_rbcL
data[2].setCodonPartition(1)

# partition for 2nd codon position
data[3] <- data_rbcL
data[3].setCodonPartition(2)

# partition for 3rd codon position
data[4] <- data_rbcL
data[4].setCodonPartition(3)

n_parts <- data.size()

# Get the size of each partition
for (i in 1:n_parts)
    n_sites[i] <- data[i].nchar(1)

# Get some useful variables from the data. We need these later on.
n_species <- data[1].ntaxa()
names <- data[1].names()
n_branches <- 2 * n_species - 3



#################################
# Subsitution Model #
#   Loop over each partition   #
#################################
  
mi <- 0
for (i in 1:n_parts){

  er_prior[i] <- v(1,1,1,1,1,1)
  er[i] ~ dnDirichlet(er_prior[i])
<<<<<<< HEAD
  moves[mv_idx+1] <- mvSimplexElementScale(er[i], alpha=10.0, tune=true, weight=3.0)

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])
  moves[mv_idx+1] <- mvSimplexElementScale(sf[i], alpha=10.0, tune=true, weight=2.0) 
=======
  moves[mi++] <- mvSimplexElementScale(er[i], alpha=10.0, tune=true, weight=3.0)

  sf_prior[i] <- v(1,1,1,1)
  sf[i] ~ dnDirichlet(sf_prior[i])
  moves[mi++] <- mvSimplexElementScale(sf[i], alpha=10.0, tune=true, weight=2.0) 
>>>>>>> 2c3d67dd56f0b10f0c490b78f628f8adf2f55473

  Q[i] := gtr(er[i],sf[i])

  shape_prior[i] <- 0.05
  shape[i] ~ dnExponential( shape_prior[i] )
<<<<<<< HEAD
  norm_gamma_rates[i] := fnNormalizedQuantile( dnGamma(shape[i], shape[i]) , 4 )

  # add moves for the stationary frequencies, exchangeability rates and the shape parameter
  moves[mv_idx+1] <- mvScale(shape[i], lambda=1.0, tune=true, weight=2.0)

=======
  norm_gamma_rates[i] := discretizeGamma( shape[i], shape[i], 4, false )
  moves[mi++] <- mvScale(shape[i], lambda=0.8, tune=true, weight=3.0)
>>>>>>> 2c3d67dd56f0b10f0c490b78f628f8adf2f55473
}

# Specify a uniform topology prior
topology ~ uniformTopology(n_species, names)

# moves on the tree
<<<<<<< HEAD
moves[mv_idx+1] <- mvNNI(topology, weight=10.0)
=======
moves[mi++] <- mvNNI(topology, weight=10.0)
>>>>>>> 2c3d67dd56f0b10f0c490b78f628f8adf2f55473

#### Specify a prior and moves on the branch lengths #### 
# create a random variable for each branch length using a for loop
for (i in 1:n_branches) {
  # We use here the exponential distribution with rate 1.0 as the branch length prior
  br_lens[i] ~ dnExponential(1.0)
  
  # Add a move for the branch length. We just take a simple scaling move since the value is a positive real number.
<<<<<<< HEAD
  moves[mv_idx+1] <- mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
=======
  moves[mi++] <- mvScale(br_lens[i],lambda=1,tune=true,weight=1) 
>>>>>>> 2c3d67dd56f0b10f0c490b78f628f8adf2f55473
}

nb <- n_branches * 1.0
tree_length := mean(br_lens) * nb


# Build the tree by combining the topology with the branch length.
phylogeny := treeAssembly(topology, br_lens)



for (i in 1:n_parts){
  phyloSeq[i] ~ phyloCTMC(tree=phylogeny, Q=Q[i], siteRates=norm_gamma_rates[i], nSites=n_sites[i], type="DNA")
  phyloSeq[i].clamp(data[i])
}


mymodel <- model(topology)

