# Phylogenetic model test

# Read data from Nexus file
D <- read("data/primates.nex")

# Create random variable drawn from a uniform topology distribution
tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=false, isBinary=true )

# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Now we can specify the model by using the tree functions for generating node or branch
# indices. 

# create the priors for the parameters of the substitution model

# pi ~ dirichlet(4)
pi_prior <- v(1,1,1,1)
pi ~ dirichlet(pi_prior)
# r ~ dirichlet(6)
r_prior <- v(1,1,1,1,1,1)
r ~ dirichlet(r_prior)


# create the rate matrix for the substitution model
Q := gtr(rates=r, freqs=pi)

dummyState <- D[1][1]

lambda <- 1

for (i in tree.nnodes():1) {
   node[i] <- tree.node(i)
   if (node[i].isRoot()) {
      bl[i] <- 0.0
   } else {
      bl[i] ~ exp(lambda)
   }

   tree.addVariable("branchLength", bl[i], node[i])
   for (j in 1:D.nchar()[1]) {  
      if (node[i].isRoot()) {   
         dna_state[i][j] ~ cat(Q.stationaryfreqs(), dummyState)
      } else {
         if (node[i].isTip()) {
            parent[i] <- node[i].ancestor()
            parentIndex <- tree.index(parent[i])
            dna_state[i][j] ~ ctmc(Q, bl[i], dna_state[parentIndex][j])
            clamp(dna_state[i][j], D[i][j] )
         } else {
            parent[i] <- node[i].ancestor()
            parentIndex <- tree.index(parent[i])
            dna_state[i][j] ~ ctmc(Q, bl[i], dna_state[parentIndex][j])
         }
      }
   }
   tree.addVariable("dna_states",dna_state[i],node[i])
}


mymodel <- model(pi)

#mymcmc <- mymodel(mymodel)
