
How specific discrete realizations for Generalized Polya Urns (GPUs)
    - GPUs include: fixed mixtures, DPPs and HMMs

cluster ~ dpp(alpha [rv], emission_length [constant]) or
cluster ~ hmm(transition_matrix [rv], emission_length [constant]) or
cluster ~ gpu(alpha [rv], transition_matrix [rv], emission_length [constant]) or
cluster ~ categorical(mass [rv], emission_length [constant])
# In above, now MAS sees why FR had a length; it's just for initial construction

for (j in unique(cluster)) {  # NB: the length of phi can be random
    phi[j] ~ G0
}

#forall (j) { phi[j] ~ G0 } which means phi_1,\ldots,\phi_K ~iid G0

for (i in 1:emission_length) {      
    datum.specific.value[i] := scatter(phi, cluster[i])
}

# datum.specific.value := scatter(phi, cluster)

Notes below here:

analytic(cluster[i])
sample(phi, cluster)

function: z := scatter(x, y) is
    z := x[y]
    
To implement:
    unique()
    scatter()
    categorical()
    dpp()
    hmm()
    
    
    
    