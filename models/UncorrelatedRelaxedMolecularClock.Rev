# Relaxed molecular clock model implementation. 
# Each branch has an independently drawn rate from a common underlying distribution
#
#Example: 
# sigma ~ exp(1)
#  ~ gamma(sigma)


# Fredrik Ronquist and Wai Lok Sibon Li

# Function that creates the model from nucleotidic matrix D.

function Model uncorrelatedRelaxedMolecularClock("data" = NucleotideMatrix D, "tree" = ClockTree tau, "distribution" = RealPos& distribution) {


# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Now we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.


#Parameters of the tree:
pi_prior <- v(1,1,1,1)
r_prior <- v(1,1,1,1,1,1)
pi ~ dirichlet(pi_prior)
r ~ dirichlet(r_prior)
Q := gtr(pi, r)


NucleotideMatrix dna_state

nodeCount <- tree.nnodes()
charCount <- D.nchar()

for (i in 1:nodeCount) {

   	node <- tree.node(i)
	   	
   		if (node.isRoot()) {   
    		for (j in 1:charCount) {
	        	dna_state[i][j] ~ categorical(pi)
                analytical(dna_state[i][j])
			}
   		}
   		else {
			
   			parent <- node.ancestor()
   			parentIndex <- tree.index(parent)
   		   	t := tau.time[parentIndex] - tau.time[i]
            rate ~ distribution
   		   	bl := t * rate
   		   	
   		   	#bl ~ distribution 
   		   	#bl ~ gamma(t/sigma, 1/sigma)
   		   	
   			if (node.isTip()) {
            	dna_state[i] ~ ctmc_iid(Q, bl, dna_state[parentIndex])
                clamp(dna_state[i], D[i])
        	}

    		else {
	    		dna_state[i] ~ ctmc_iid(Q, bl, dna_state[parentIndex])
                analytical(dna_state[i])
   			}
   		}
   	}
}



return model(pi_root);

}

