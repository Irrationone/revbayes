# Phylogenetic model with branch-specific GTR matrices. 
# Each branch has its own set of equilibrium frequencies and exchangeability parameters.
# There is an extra set of frequencies for the root. 
# The overall model is non-stationary and therefore non-reversible, so the tree is rooted.

# Fredrik Ronquist and Bastien Boussau

# Function that creates the model from aligned nucleotidic matrix D.

function Model branchHeterogeneousGTR("data" = NucleotideMatrix D) {

# Create random variable drawn from a uniform topology distribution
tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=true, isBinary=true )


# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Add variables to the tree plate
tree.addVariable("l_branch", "Real+")
tree.addVariable("pi_branch", "Simplex")
tree.addVariable("r_branch", "Simplex")

# Now we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.


#Parameters of the root:
pi_prior <- v(1,1,1,1)
pi_root ~ dirichlet(pi_prior)
r_prior <- v(1,1,1,1,1,1)



NucleotideMatrix dna_state

lambda <- 1
nodeCount <- tree.nnodes()
charCount <- D.nchar()

for (i in 1:nodeCount) {

   	node <- tree.node(i)
	   		
   
   		if (node.isRoot()) {   
    		for (j in 1:charCount) {
	        	dna_state[i][j] ~ categorical(pi_root)
			}
   		}
   		else {
   			parent <- node.ancestor()
   			parentIndex <- tree.index(parent)
			bl[i] ~ exp(lambda)
			pi_branch[i] ~ dirichlet(pi_prior)
			r_branch[i] ~ dirichlet(r_prior)
    		Q[i] := gtr(pi_branch[i], r_branch[i])
   			
   			if (node.isTip()) {
            	for (j in 1:charCount) {
            		dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
            		clamp(dna_state[i][j], D[i][j])
            	}
        	}

    		else {

    			for (j in 1:charCount) {
	    			dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
	    		}
   			}	
   		}
   	}




return model(pi_root);

}
