# Phylogenetic model with branch-specific GTR matrices. 
# Each branch has its own set of equilibrium frequencies and exchangeability parameters.
# The number of equilibrium frequencies and exchangeability parameters and their values are specified through Dirichlet Process Priors.
# There are different versions of this function, depending on whether equilibrium frequencies and exchangeability parameters are sampled separately or jointly (two versions of dppBranchHeterogeneousGTR with different parameters), or whether only one set of equilibrium frequencies or exchangeability parameters is used for all branches (dppBranchHeterogeneousGTRCommonExchangeabilities or dppBranchHeterogeneousGTRCommonEquilibriumFrequencies).
# There is an extra set of frequencies for the root. 
# The overall model is non-stationary and therefore non-reversible, so the tree is rooted.

# Fredrik Ronquist and Bastien Boussau

# Function that creates the model from nucleotidic matrix D.
# A DPP process associates equilibrium frequencies to each branch, and another DPP process associates exchangeability parameters to each branch.

function Model dppBranchHeterogeneousGTR("data" = NucleotideMatrix D, "expectedNumberOfStatFreq" = Real+ num_pi, "expectedNumberOfExchangeabilities" = Real+ num_exch) {

####DPP-related computations

#Obtain the expected concentration values
expectedAlpha_pi <- dppConFromExpNumClusters(num_pi, tree.nnodes()-1)
expectedAlpha_r <- dppConFromExpNumClusters(num_exch, tree.nnodes()-1)

#Hyperprior for the concentration parameters
alpha_pi ~ gamma(shape = 2, rate = 2/ expectedAlpha_pi)
alpha_r ~ gamma(shape = 2, rate = 2/ expectedAlpha_r)

pi_prior <- v(1, 1, 1, 1)
r_prior <- v(1, 1, 1, 1, 1, 1)

#Draw clusters for each branch
for (i in 1:tree.nnodes()-1) {
    cluster_pi[i] ~ dpp(alpha_pi)
    cluster_r[i] ~ dpp(alpha_r)
}

#Draw equilibrium frequencies for each cluster of equilibrium frequencies
for (j in unique(cluster_pi)) {  # NB: the length of phi can be random
    pi_unique[j] ~ dirichlet(pi_prior)
}

#Draw exchangeabilities for each cluster of exchangeabilities       
for (j in unique(cluster_r)) {  # NB: the length of phi can be random
    r_unique[j] ~ dirichlet(r_prior)
}
####End of DPP-related computations



# Create random variable drawn from a uniform topology distribution
tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=true, isBinary=true )


# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Add variables to the tree plate
tree.addVariable("l_branch", "Real+")
tree.addVariable("pi_branch", "Simplex")
tree.addVariable("r_branch", "Simplex")

# Now we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.


#Parameters of the root:
pi_root ~ dirichlet(pi_prior)



NucleotideMatrix dna_state

lambda <- 1
nodeCount <- tree.nnodes()
charCount <- D.nchar()

for (i in 1:nodeCount) {

   	node <- tree.node(i)
	   		
   
   		if (node.isRoot()) {   
    		for (j in 1:charCount) {
	        	dna_state[i][j] ~ categorical(pi_root)
			}
   		}
   		else {
   			parent <- node.ancestor()
   			parentIndex <- tree.index(parent)	
   			bl[i] ~ exp(lambda)
   			Q[i] := gtr(pi_unique[cluster_pi[i]], r_unique[cluster_r[i]])

   			if (node.isTip()) {
            	for (j in 1:charCount) {
            		dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
            		clamp(dna_state[i][j], D[i][j])
            	}
        	}
    		else {
    			for (j in 1:charCount) {
	    			dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
	    		
	    		}
   			}	
   		}
   	}


return model(pi_root);

}

####################################################################################################
####################################################################################################

# A single DPP process associates both equilibrium frequencies and exchangeabilities to each branch.


function Model dppBranchHeterogeneousGTR("data" = NucleotideMatrix D, "expectedNumberOfQMatrices" = Real+ num_q) {

####DPP-related computations

#Obtain the expected concentration values
expectedAlpha_q <- dppConFromExpNumClusters(num_q, tree.nnodes()-1)


#Hyperprior for the concentration parameters
alpha_q ~ gamma(shape = 2, rate = 2/ expectedAlpha_q)

pi_prior <- v(1, 1, 1, 1)
r_prior <- v(1, 1, 1, 1, 1, 1)

#Draw clusters for each branch
for (i in 1:tree.nnodes()-1) {
    cluster_q[i] ~ dpp(alpha_q)
}

#Draw equilibrium frequencies and exchangeabilities for each cluster of equilibrium frequencies
for (j in unique(cluster_q)) {  # NB: the length of phi can be random
    pi_unique[j] ~ dirichlet(pi_prior)
    r_unique[j] ~ dirichlet(r_prior)
}


####End of DPP-related computations



# Create random variable drawn from a uniform topology distribution
tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=true, isBinary=true )


# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Add variables to the tree plate
tree.addVariable("l_branch", "Real+")
tree.addVariable("pi_branch", "Simplex")
tree.addVariable("r_branch", "Simplex")

# Now we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.


#Parameters of the root:
pi_root ~ dirichlet(pi_prior)



NucleotideMatrix dna_state

lambda <- 1
nodeCount <- tree.nnodes()
charCount <- D.nchar()

for (i in 1:nodeCount) {

   	node <- tree.node(i)
	   		
   
   		if (node.isRoot()) {   
    		for (j in 1:charCount) {
	        	dna_state[i][j] ~ categorical(pi_root)
			}
   		}
   		else {
   			parent <- node.ancestor()
   			parentIndex <- tree.index(parent)	
   			bl[i] ~ exp(lambda)
   			Q[i] := gtr(pi_unique[cluster_q[i]], r_unique[cluster_q[i]])

   			if (node.isTip()) {
            	for (j in 1:charCount) {
            		dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
            		clamp(dna_state[i][j], D[i][j])
            	}
        	}
    		else {
    			for (j in 1:charCount) {
	    			dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
	    		
	    		}
   			}	
   		}
   	}


return model(pi_root);

}



####################################################################################################
####################################################################################################

# A DPP process associates equilibrium frequencies to each branch, and a single set of exchangeability parameters fits all branches.

function Model dppBranchHeterogeneousGTRCommonExchangeabilities("data" = NucleotideMatrix D, "expectedNumberOfStatFreq" = Real+ num_pi) {

####DPP-related computations
#Obtain the expected concentration values
expectedAlpha_pi <- dppConFromExpNumClusters(num_pi, tree.nnodes()-1)

#Hyperprior for the concentration parameter
alpha_pi ~ gamma(shape = 2, rate = 2/ expectedAlpha_pi)

pi_prior <- v(1, 1, 1, 1)
r_prior <- v(1, 1, 1, 1, 1, 1)

#Draw clusters for each branch
for (i in 1:tree.nnodes()-1) {
    cluster_pi[i] ~ dpp(alpha_pi)
}

#Draw equilibrium frequencies for each cluster
for (j in unique(cluster_pi)) {  # NB: the length of phi can be random
    pi_unique[j] ~ dirichlet(pi_prior)
}
####End of DPP-related computations


# Create random variable drawn from a uniform topology distribution
tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=true, isBinary=true )

# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Add variables to the tree plate
tree.addVariable("l_branch", "Real+")
tree.addVariable("pi_branch", "Simplex")

# Now we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.


#Parameters of the root:
pi_root ~ dirichlet(pi_prior)
r ~ dirichlet(r_prior)

NucleotideMatrix dna_state

lambda <- 1
nodeCount <- tree.nnodes()
charCount <- D.nchar()

for (i in 1:nodeCount) {

   	node <- tree.node(i)
	   		
   
   		if (node.isRoot()) {   
    		for (j in 1:charCount) {
	        	dna_state[i][j] ~ categorical(pi_root)
			}
   		}
   		else {
   			parent <- node.ancestor()
   			parentIndex <- tree.index(parent)	
   			bl[i] ~ exp(lambda)
   			Q[i] := gtr(pi_unique[cluster_pi[i]], r)

   			if (node.isTip()) {
            	for (j in 1:charCount) {
            		dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
            		clamp(dna_state[i][j], D[i][j])
            	}
        	}
    		else {
    			for (j in 1:charCount) {
	    			dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
	    		
	    		}
   			}	
   		}
   	}




return model(pi_root);

}


####################################################################################################
####################################################################################################

function Model dppBranchHeterogeneousGTRCommonEquilibriumFrequencies("data" = NucleotideMatrix D, "expectedNumberOfExchangeabilities" = Real+ num_exch) {

####DPP-related computations

#Obtain the expected concentration values
expectedAlpha_r <- dppConFromExpNumClusters(num_exch, tree.nnodes()-1)

#Hyperprior for the concentration parameters
alpha_r ~ gamma(shape = 2, rate = 2/ expectedAlpha_r)

pi_prior <- v(1, 1, 1, 1)
r_prior <- v(1, 1, 1, 1, 1, 1)

#Draw clusters for each branch
for (i in 1:tree.nnodes()-1) {
    cluster_r[i] ~ dpp(alpha_r)
}

#Draw exchangeabilities for each cluster of exchangeabilities       
for (j in unique(cluster_r)) {  # NB: the length of phi can be random
    r_unique[j] ~ dirichlet(r_prior)
}
####End of DPP-related computations



# Create random variable drawn from a uniform topology distribution
tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=true, isBinary=true )


# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

# Add variables to the tree plate
tree.addVariable("l_branch", "Real+")
tree.addVariable("r_branch", "Simplex")

# Now we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.


#Parameters of the root:
pi_root ~ dirichlet(pi_prior)

#Set of equilibrium frequencies shared by all branches
pi ~ dirichlet(pi_prior)


NucleotideMatrix dna_state

lambda <- 1
nodeCount <- tree.nnodes()
charCount <- D.nchar()

for (i in 1:nodeCount) {

   	node <- tree.node(i)
	   		
   
   		if (node.isRoot()) {   
    		for (j in 1:charCount) {
	        	dna_state[i][j] ~ categorical(pi_root)
			}
   		}
   		else {
   			parent <- node.ancestor()
   			parentIndex <- tree.index(parent)	
   			bl[i] ~ exp(lambda)
   			Q[i] := gtr(pi, r_unique[cluster_r[i]])

   			if (node.isTip()) {
            	for (j in 1:charCount) {
            		dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
            		clamp(dna_state[i][j], D[i][j])
            	}
        	}
    		else {
    			for (j in 1:charCount) {
	    			dna_state[i][j] ~ ctmc(Q[i], bl[i], dna_state[parentIndex][j])
	    		
	    		}
   			}	
   		}
   	}


return model(pi_root);

}




