# Series of phylogenetic models with and without mixtures to account for rate heterogeneity among sites. 

# By Bastien Boussau, Tracy Heath and Sebastian Hoehna

#################
# First we construct the tree topology with 5 taxa (we could also read it from a file)
#################
taxaCount <- 5
names <- ["A", "B", "C", "D", "E"]
siteCount <- 100

tau ~ unifTopology( numberTaxa=taxaCount, tipNames=names, isRooted=false, isBinary=true )

# Create the tree plate that is ordered by the topology
tree <- treeplate(tau)

#################
# First a simple GTR model without heterogeneity
#################
# Here we can specify the model by using the tree functions for generating node or branch
# indices. In rooted trees, T.anc(i) would simply give the ancestral node index with respect
# to the root.

pi <- simplex(1,2,3,4)
exchange <- simplex(1,1,1,1,1,1)

#NucleotideMatrix dna_state

lambda <- 1.0
nodeCount <- tree.nnodes()

for (i in nodeCount:1) {
    node <- tree.node(i)
    if (node.isRoot()) {   
        for (j in 1:siteCount) {
            dna_state[i][j] ~ categorical(pi)
        }
    }
    else {
        parent <- node.ancestor()
        parentIndex[i] <- tree.index(parent)	
        bl[i] ~ exponential(lambda)
        tree.addVariable("branchLength", bl[i], node[i])
        Q[i] := gtr(pi, exchange)
        if (node.isTip()) {
            for (j in 1:siteCount) {
                dna_state[i][j] ~ dtmm(Q[i], bl[i], dna_state[parentIndex[i]][j])
                clamp(dna_state[i][j], D[i][j])
            }
        }   
    else {
            for (j in 1:siteCount) {
                dna_state[i][j] ~ dtmm(Q[i], bl[i], dna_state[parentIndex[i]][j])
            }
        }	
    }
}

mygtr <- model( tree.node(1) )

################
# Now we have a simple GTR model on a tree with 5 leaves.
# Let's simulate nsites sites
################

#Where we want to put the simulated alignment:
objectMonitors <- objectMonitor(printgen=1, mu, e, sigma, x)
filemonitors <- fileMonitor(filename="gtrSimulation.out", printgen=1, separator="	", mu, e, sigma, x)

mysimu <- simulate(mygtr, filemonitors, objectMonitors)
mysimu.run(1)

################
# Now we can do some inference!
################
##We need to define moves
#Moves on branch lengths
lambda <- 1.0
for (i in tree.nnodes():1) {
    node[i] <- tree.node(i)
    if (! node[i].isRoot()) {
        moves[i] <- mscale(bl[i], weight=1.0, lambda = 1.0)
    }
}
numMoves <- size(moves)

#Move on the stationary frequencies and rates
moves[numMoves+1] <- msimplex(4)
moves[numMoves+2] <- msimplex(6)


mymcmcgtr <- mcmc(mygtr, moves=moves, monitor=filemonitors)

mymcmcgtr.run(generations=1000)

################################################################################
################################################################################
################################################################################

################
# That was too simple, let's add some models of rate heterogeneity among sites
# We use the classic discretized gamma law (Yang 1994)
################

################
# We first need to create a mixture model with 4 categories of gamma.
################
#Prior for the rates
alpha_prior <- 1.0

alpha ~ exponential (alpha_prior)
#TAH: 
# Since the gamma has a mean = 1, then the rate of the gamma is equal to alpha, hence 
gamma_quantiles <- [qgamma(0.125,alpha,alpha), qgamma(0.375,alpha,alpha), qgamma(0.625,alpha,alpha), qgamma(0.875,alpha,alpha)]
distgama ~ cat (probabilities = [0.25, 0.25, 0.25, 0.25], states = gamma_quantiles)

#Draw rate for each cluster of sites 
for (j in 1:(num_rates ) ) {  
    rate_parameters[j] ~ distgama
}

#The Mixture simplest constructor creates the allocation vector and the probability vector (probabilityVector) and links them to the parameter vector into a coherent DAG on which computations can be performed.
rateMixture <- mixture( numObservations=siteCount, parameters=rate_parameters )

################
# We create the model
################

lambda <- 1.0
nodeCount <- tree.nnodes()

for (i in nodeCount:1) {
    node <- tree.node(i)
    if (node.isRoot()) {   
        for (j in 1:siteCount) {
            dna_state[i][j] ~ categorical(pi)
        }
    }
    else {
        parent <- node.ancestor()
        parentIndex[i] <- tree.index(parent)	
        bl[i] ~ exponential(lambda)
        tree.addVariable("branchLength", bl[i], node[i])
        Q[i] := gtr(pi, exchange)
        if (node.isTip()) {
            for (j in 1:siteCount) {
                dna_state[i][j] ~ dtmm(Q[i], bl[i]*rateMixture.getObservation(j), dna_state[parentIndex[i]][j])
                clamp(dna_state[i][j], D[i][j])
            }
        }   
    else {
            for (j in 1:siteCount) {
                dna_state[i][j] ~ dtmm(Q[i], bl[i]*rateMixture.getObservation(j), dna_state[parentIndex[i]][j])
            }
        }	
    }
}

mygtrgamma <- model( tree.node(1) )


################
# Now we have a simple GTR+Gamma model on a tree with 5 leaves.
# Let's simulate nsites sites
################

#Where we want to put the simulated alignment:
objectMonitors <- objectMonitor(printgen=1, mu, e, sigma, x)
filemonitors <- fileMonitor(filename="gtrSimulation.out", printgen=1, separator="	", mu, e, sigma, x)

mysimu <- simulate(mygtrgamma, filemonitors, objectMonitors)
mysimu.run(1)

################
# Now we can do some inference!
################
##We need to define moves
#Moves on branch lengths
lambda <- 1.0
for (i in tree.nnodes():1) {
node[i] <- tree.node(i)
if (! node[i].isRoot()) {
moves[i] <- mscale(bl[i], weight=1.0, lambda = 1.0)
}
}
numMoves <- size(moves)

#Moves on the stationary frequencies and rates
moves[numMoves+1] <- msimplex(4)
moves[numMoves+2] <- msimplex(6)

#Move on the alpha parameter of the gamma distribution
moves[numMoves+3] <- mscale(alpha, weight=1.0, lambda = 1.0)

#Moves on the mixture
numMoves <- size(moves)

moves[numMoves+1]<-changeClassProbabilitiesMove(rateMixture)

numMoves <- size(moves)
for (i in 1:rateMixture.getNumberOfElements() ) {
moves[i + numMoves] <- reallocate(rateMixture, i)
}

numMoves <- size(moves)
for (i in 1:rateMixture.getNumberOfClasses() ) {
moves[i + numMoves] <- mscale(rateMixture.getParameter(i), weight=1.0, lambda = 1.0)
}


mymcmcgtrgamma <- mcmc(mygtrgamma, moves=moves, monitor=filemonitors)

mymcmcgtrgamma.run(generations=1000)


################################################################################
################################################################################
################################################################################

################
# That was too common, let's use a mixture model with two categories where rates are estimated
# without a Gamma distribution
################

num_rates <- 2

#Prior for the rates
lambda_rate_prior <- 1.0

#Draw rate for each cluster of sites 
for (j in 1:(num_rates ) ) {  
    rate_parameters[j] ~ exponential(lambda_rate_prior)
}

#The Mixture simplest constructor creates the allocation vector and the probability vector (probabilityVector) and links them to the parameter vector into a coherent DAG on which computations can be performed.
rateMixture <- mixture( numObservations=siteCount, parameters=rate_parameters )

for (i in nodeCount:1) {
    node <- tree.node(i)
    if (node.isRoot()) {   
        for (j in 1:siteCount) {
            dna_state[i][j] ~ categorical(pi)
        }
    }
    else {
        parent <- node.ancestor()
        parentIndex[i] <- tree.index(parent)	
        bl[i] ~ exponential(lambda)
        tree.addVariable("branchLength", bl[i], node[i])
        Q[i] := gtr(pi, exchange)
        if (node.isTip()) {
            for (j in 1:siteCount) {
                dna_state[i][j] ~ dtmm(Q[i], bl[i]*rateMixture.getObservation(j), dna_state[parentIndex[i]][j])
                clamp(dna_state[i][j], D[i][j])
            }
        }   
    else {
            for (j in 1:siteCount) {
                dna_state[i][j] ~ dtmm(Q[i], bl[i]*rateMixture.getObservation(j), dna_state[parentIndex[i]][j])
            }
        }	
    }
}

mygtrmixrates <- model( tree.node(1) )


################
# Now we have a simple GTR+mixture model on a tree with 5 leaves.
# Let's simulate nsites sites
################

#Where we want to put the simulated alignment:
objectMonitors <- objectMonitor(printgen=1, mu, e, sigma, x)
filemonitors <- fileMonitor(filename="gtrSimulation.out", printgen=1, separator="	", mu, e, sigma, x)

mysimu <- simulate(mygtrmixrates, filemonitors, objectMonitors)
mysimu.run(1)

################
# Now we can do some inference!
################
##We need to define moves
#Moves on branch lengths
lambda <- 1.0
for (i in tree.nnodes():1) {
node[i] <- tree.node(i)
if (! node[i].isRoot()) {
moves[i] <- mscale(bl[i], weight=1.0, lambda = 1.0)
}
}
numMoves <- size(moves)

#Move on the stationary frequencies and rates
moves[numMoves+1] <- msimplex(4)
moves[numMoves+2] <- msimplex(6)

#Moves on the mixture
numMoves <- size(moves)

#Move on the rate parameters of the mixture
for (j in 1:(num_rates ) ) {  
    moves[numMoves+j] <- mscale(rate_parameters[j], weight=1.0, lambda = 1.0)
}

numMoves <- size(moves)
moves[numMoves+1]<-changeClassProbabilitiesMove(rateMixture)

numMoves <- size(moves)
for (i in 1:rateMixture.getNumberOfElements() ) {
moves[i + numMoves] <- reallocate(rateMixture, i)
}

numMoves <- size(moves)
for (i in 1:rateMixture.getNumberOfClasses() ) {
moves[i + numMoves] <- mscale(rateMixture.getParameter(i), weight=1.0, lambda = 1.0)
}

mymcmcgtrmixrates <- mcmc(mygtrmixrates, moves=moves, monitor=filemonitors)

mymcmcgtrmixrates.run(generations=1000)

################################################################################
################################################################################
################################################################################

################
# That was too rough, let's use a mixture model that can account for heterotachy.
# We use a mixture model with two sets of branch lengths.
################

num_setbl <- 2

#Prior for the rates
lambda_rate_prior <- 1.0

#Draw rate for each cluster of sites 
for (j in 1: num_setbl  ) {  
    for (i in 1:nodeCount - 1) {
        bls[j][i] ~ exponential(lambda_rate_prior) 
    }
}

#The Mixture simplest constructor creates the allocation vector and the probability vector (probabilityVector) and links them to the parameter vector into a coherent DAG on which computations can be performed.
blMixture <- mixture( numObservations=siteCount * nodeCount, parameters=bls )

for (i in nodeCount:1) {
    node <- tree.node(i)
    if (node.isRoot()) {   
        for (j in 1:siteCount) {
            dna_state[i][j] ~ categorical(pi)
        }
    }
    else {
        parent <- node.ancestor()
        parentIndex[i] <- tree.index(parent)	
        Q[i] := gtr(pi, exchange)
        if (node.isTip()) {
            for (j in 1:siteCount) {
                numParam <- (i-1)*siteCount + j
                bl[numParam] ~ blMixture.getObservation(numParam)
                dna_state[i][j] ~ dtmm(Q[i], bl[numParam], dna_state[parentIndex[i]][j])
                clamp(dna_state[i][j], D[i][j])
            }
        }   
    else {
            for (j in 1:siteCount) {
                numParam <- (i-1)*siteCount + j
                bl[numParam] ~ blMixture.getObservation(numParam)
                dna_state[i][j] ~ dtmm(Q[i], bl[numParam], dna_state[parentIndex[i]][j])
            }
        }	
    }
}

mygtrheterotachy <- model( tree.node(1) )


################
# Now we have a simple GTR+mixture model on a tree with 5 leaves.
# Let's simulate nsites sites
################

#Where we want to put the simulated alignment:
objectMonitors <- objectMonitor(printgen=1, mu, e, sigma, x)
filemonitors <- fileMonitor(filename="gtrSimulation.out", printgen=1, separator="	", mu, e, sigma, x)

mysimu <- simulate(mygtrheterotachy, filemonitors, objectMonitors)
mysimu.run(1)

################
# Now we can do some inference!
################
##We need to define moves
numMoves <- 0

#Move on the stationary frequencies and rates
moves[numMoves+1] <- msimplex(4)
moves[numMoves+2] <- msimplex(6)

#Moves on the mixture
numMoves <- size(moves)

#Move on the rate parameters of the mixture
for (j in 1:  size(bl) ) {  
    moves[numMoves+j] <- mscale(rate_parameters[j], weight=1.0, lambda = 1.0)
}

numMoves <- size(moves)
moves[numMoves+1]<-changeClassProbabilitiesMove(rateMixture)

numMoves <- size(moves)
for (i in 1:rateMixture.getNumberOfElements() ) {
    moves[i + numMoves] <- reallocate(rateMixture, i)
}

numMoves <- size(moves)
for (i in 1:rateMixture.getNumberOfClasses() ) {
    moves[i + numMoves] <- mscale(rateMixture.getParameter(i), weight=1.0, lambda = 1.0)
}


mymcmcgtrheterotachy <- mcmc(mygtrheterotachy, moves=moves, monitor=filemonitors)

mymcmcgtrheterotachy.run(generations=1000)

