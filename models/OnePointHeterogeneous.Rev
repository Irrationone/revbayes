# Phylogenetic model with a change in the GTR matrices at one point in the tree. 
# One clade will have a separate set of equilibrium frequencies and exchangeability parameters.

# Fredrik Ronquist and Martin Ryberg

# Function that creates the model from aligned nucleotidic matrix D.

function Model OnePointHeterogeneous("data" = NucleotideMatrix D) {

# Create random variable drawn from a uniform topology distribution
    tau ~ unifTopology( numberTaxa=D.ntaxa(), tipNames=D.names(), isRooted=false, isBinary=true )


# Create the tree plate that is ordered by the topology
    tree <- treeplate(tau)

# Add variables to the tree plate
    tree.addVariable("l_branch", "Real+")

# Now we can specify the model by using the tree functions for generating node or branch
# indices.


# Parameters for the two models (model two [2] will be implemented after point of change 
    pi_prior <- v(1,1,1,1)
    r_prior <- v(1,1,1,1,1,1)

    pi[1] ~ dirichlet(pi_prior)
    pi[2] ~ dirichlet(pi_prior)

    r[1] ~ dirichlet(r_prior)
    r[2] ~ dirichlet(r_prior)


    NucleotideMatrix dna_state

    lambda <- 1
    nodeCount <- tree.nnodes()
    charCount <- D.nchar()

# Point of change. Each branch is selected with equal probability irrespective of length.
    position ~ unif(0,1)    # Point of change at branch.
    node_index ~ categorical(simplex(nodeCount-1)) # Branch that the change occure at.

    for (i in 1:nodeCount) {

        node <- tree.node(i)
   
        if (node.isRoot()) {   
            for (j in 1:charCount) {
	        dna_state[i][j] ~ categorical(pi1)
	    }
        }
        else {
            parent <- node.ancestor()
            parentIndex <- tree.index(parent)
            bl[i] ~ exp(lambda)

	    P := transProbs( pi, r, tree, position, node_index, i)

            if (node.isTip()) {
                for (j in 1:charCount) {
                    dna_state[i][j] ~ ctmc(P, dna_state[parentIndex][j])
                    clamp(dna_state[i][j], D[i][j])
                }
            }
            else {
                for (j in 1:charCount) {
	            dna_state[i][j] ~ ctmc(P, dna_state[parentIndex][j])
	        }
            }	
        }
    }

    return model(pi_root);

}

function TransitionProbMatrix transProbs( Simplex pi, Simplex r, Tree tree, RealPos position, Natural switchIndex, Natural currentNode ) {

    brlen <- tree.bl[currentNode]

    if ( currentNode == switchIndex ) {  # This is the branch where the change occure

        time1 <- position * brlen
	time2 <- (1.0 - position) * brlen

	Q1 <- gtr(pi[1],r[1])
	Q2 <- gtr(pi[2],r[2])

	return exp(Q1*time1) * exp(Q2*time2)
    }

    p = tree.nodes[currentNode]
    # Look for node where change ocured by moving towards root
    while ( p != root ) { 
                         

        p = p.ancestor()
        if ( p.index() == switchIndex ) {  # If funding the node of change implement model 2
	    
            Q2 <- gtr(pi[2],r[2])
            return exp(Q2*brlen)
        }
    }
    # If hitting root before node of change implement model 1
    Q1 <- gtr(pi[1],r[1])
    return exp(Q1*brlen)
}

